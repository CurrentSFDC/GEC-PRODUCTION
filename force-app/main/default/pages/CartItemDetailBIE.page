<apex:page id="CartItemDetailBIE" docType="html-5.0" sidebar="false" showHeader="false" standardStylesheets="false" applyHtmlTag="false" controller="CartDetailActions">
    
    <c:Cart />
    <c:B2B_CommissionWidgetModal2 />
    <div id="commissionWidgetModalParent2"></div>
    
    
    <script>
    var rqDateChanged = false;
    var typeMarkChanged = false;
    var messageObj = {messages: []};
    var isAgent = false;
    var isSample = false;
    console.log('first cartid ',CCRZ.pagevars.currentCartID);
    
    Handlebars.registerHelper('getUOMlabel', function(uom) {
        return getUomLabelByUomCode(uom);
    });
    
    Handlebars.registerHelper('getPiecesPerUnit', function(uom, pricingUOMS) {
        if(pricingUOMS == undefined){return 1};
        for (i = 0; i < pricingUOMS.length; i++) {
            if (pricingUOMS[i].UOM == uom) return pricingUOMS[i].multiplier;
        }
        return 1;
    });
    Handlebars.registerHelper("formatDate", function formatDate(dateTime) {
        let date = dateTime == null ? new Date() : new Date(dateTime);
        return date.toISOString().split('T')[0];
    });
    /*
        Handlebars.registerHelper("formatDate", function(datetime) {
            if(datetime==undefined){
                datetime=new Date();
                //datetime.setDate(datetime.getDate()-1);
                datetime.setDate(datetime.getDate());//Removed -1 as it was not giving correct Date
            }
                        var d = new Date(datetime),
                    month = '' + (d.getMonth() + 1),
                    day = '' + (d.getDate()),
                    year = d.getFullYear();
                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;

                return [year, month, day].join('-');
			});
			*/
    jQuery(function($) {
        CCRZ.models.CartDetail = CCRZ.CloudCrazeModel.extend({
            className: 'cc_ctrl_Cart3',
            priceFetch: function (skipAutoCalc, callback) {
                var model = this;
                console.log('Time J:',Date());
                this.invokeContainerLoadingCtx($('.deskLayout'), 'priceCart', false, function(response, event){
                    if (response && response.success) {
                        console.log('Time K:',Date());
                        model.fetch(skipAutoCalc, callback);
                    }else {
                        CCRZ.pubSub.trigger("pageMessage", response);
                    }
                }, {escape : true, buffer: false});
            },
            fetch: function (skipAutoCalc, callback) {
                var model = this;
                console.log('Time L:',Date());
                model.invokeContainerLoadingCtx($('.deskLayout'), 'fetchCart', function (response, event) {
                    model.set('messages', (response && response.messages)?response.messages:[]);
                    if (response && response.data && response.success && event.status) {
                        console.log('Time M:',Date());
                        response.data['hasCoupon'] =
                            (response.data.couponList && response.data.couponList.length > 0);
                        response.data['couponName'] =
                            (response.data['hasCoupon'])? response.data.couponList[0]['couponName'] : null;
                        var cartModelData = response.data;
                        model.processData(cartModelData, model);
                        model.trigger('refreshedFromServer');
                        callback(response);
                    } else {
                        callback(response);
                    }
                    CCRZ.pubSub.trigger("pageMessage", response);
                }, {escape: false, timeout: 120000});
            },
            parseAttributes: function(data) {
                _.each(data.cartItems, function(item) {
                    _.each(item.minorLines, function(line){
                        item.topAttributes = [];
                        if(line.primaryAttr){
                            line.primaryAttr.displayName = data.attributeList[line.primaryAttr.sfid].displayName;
                            item.topAttributes.push(_.find(data.attributeList, function (a) {
                                return a.sfid === line.primaryAttr.parentAttribute;
                            }));
                        }
                        if(line.secondaryAttr) {
                            line.secondaryAttr.displayName = data.attributeList[line.secondaryAttr.sfid].displayName;
                            item.topAttributes.push(_.find(data.attributeList, function (a) {
                                return a.sfid === line.secondaryAttr.parentAttribute;
                            }));
                        }
                        if(line.tertiaryAttr) {
                            line.tertiaryAttr.displayName = data.attributeList[line.tertiaryAttr.sfid].displayName;
                            item.topAttributes.push(_.find(data.attributeList, function (a) {
                                return a.sfid === line.tertiaryAttr.parentAttribute;
                            }));
                        }
                    });
                });
            },
            applyCoupon: function(couponCode, skipAutoCalc, callback) {
                var model = this;
                this.invokeContainerLoadingCtx($('.deskLayout'),'applyCoupon',couponCode,function(response, event){
                    if (response.success)
                        model.priceFetch(skipAutoCalc, callback);
                    else
                        callback(response);
                });
            },
            clearCoupon: function(skipAutoCalc, callback) {
                var model = this;
                this.invokeContainerLoadingCtx($('.deskLayout'),'clearCoupon',function(response, event){
                    if (response.success)
                        model.priceFetch(skipAutoCalc, callback);
                    else
                        callback(response);
                });
            },
            checkForChanges: function() {
                var hasChanged = this.hasChanged();
                if (!hasChanged) {
                    this.get('ECartItemsS').each(function(item) {
                        if (!hasChanged && item.hasChanged()) {
                            hasChanged = true;
                        }
                        //Handle Attribute Items That Have Had their Qty Changed
                        if(!hasChanged && item.get('pricingType') == "attrGroup" && item.attrQtyChanged){
                            hasChanged = true;
                            item.attrQtyChanged = false;
                        }
                    });
                }
                return hasChanged;
            },
            processData : function(cartModelData, model){
                if (cartModelData['ECartItemsS']){
                    var productData = cartModelData['productList'];
                    var qtyRules = cartModelData['qtyRules'];
                    var sptMap = cartModelData['sptMap'];
                    var cartItems = cartModelData['ECartItemsS'];
                    var cartItemMap =_.indexBy(cartItems, 'sfid');
                    var cartCouponItems = [];
                    var cartuomItems =[];
                    //var cartmin = cartItems['cartItemType'];
                    // var minData = cartmin['minorData'];
                    var cartNew = _.indexBy(cartItems, 'cartItemType');
                    var cartmin = _.indexBy(cartNew, 'Minor');
                    var count = Object.keys(cartmin).length;
                    
                    //console.log("cartmin"+ JSON.stringify(cartmin));
                    //console.log("cartItems"+ JSON.stringify(cartItems));
                    //console.log("cartItems2"+ JSON.stringify(cartNew));
                    // console.log("count"+ count);
                    // console.log("cartItems.length"+ cartItems.length);
                    for( var i = cartItems.length; i--;){
                        var cartItem = cartItems[i];
                        if(cartItem['subProdTerm'] && sptMap){
                            model.processSubscriptions(cartItem, sptMap, cartModelData);
                        }
                        if(cartItem['seller'] && cartModelData['sellerList']) {
                            var seller =  _.find(cartModelData['sellerList'], function(s) {
                                return cartItem['seller'] === s['sfid'];
                            });
                            if (seller) {
                                cartItem['sellerName'] = seller['sfdcName'];
                            }
                        }
                        // adjust for negative price (e.g. discounts)
                        if (isNaN(cartItem['price']) || Number(cartItem['price']) < 0) {
                            cartItem['price'] = 0.0;
                        }
                        //'You Save' discount amounts
                        cartItem['adjustmentAmount'] = (isNaN(cartItem['adjustmentAmount']))?0.00:Number(cartItem['adjustmentAmount']);
                        cartItem['baseDiscount'] = (isNaN(cartItem['absoluteDiscount']))?0.00:Number(cartItem['absoluteDiscount']);
                        cartItem['absoluteDiscount'] = cartItem['baseDiscount']+ (-1*cartItem['adjustmentAmount']);
                        if(cartItem['cartItemType'] === 'Major') {
                            //Stitch the main product data to the cart item
                            var product = productData[cartItem.product];
                            cartItem['product'] = product;
                            
                            //Check for display product and stitch it to the cart item
                            var displayProduct = productData[cartItem.displayProduct];
                            if (displayProduct != null) {
                                cartItem['displayProduct'] = displayProduct;
                            }
                            
                            //Process Quantity Rules for Majors
                            if (qtyRules && qtyRules[product['SKU']]) {
                                cartItem['qtyIncrement'] = qtyRules[product['SKU']].Increment;
                                cartItem['qtySkipIncrement'] = qtyRules[product['SKU']].SkipIncrement;
                            } else {
                                cartItem['qtyIncrement'] = 1;
                            }
                        } else if ((cartItem['cartItemType'] === 'Minor') || (cartItem['cartItemType'] === 'Coupon' && cartItem['parentCartItem'])) {
                            var itemIdx = cartModelData['ECartItemsS'].indexOf(cartItem);
                            cartItems.splice( itemIdx, 1 );
                            model.processMinor(cartItem, cartModelData, cartItemMap);
                            //Array.prototype.push.apply(cartuomItems, (cartItems.splice( itemIdx, 1 )));
                        } else if(cartItem['cartItemType'] === 'Coupon'){
                            //Stitch the main product data to the cart item
                            var product = productData[cartItem.product];
                            cartItem['product'] = product;
                            
                            //its a major coupon item. remove so we can add it to the bottom of the list
                            var itemIdx = cartModelData['ECartItemsS'].indexOf(cartItem);
                            //add the removed coupon to the list of saved coupon cart items
                            Array.prototype.push.apply(cartCouponItems, (cartItems.splice( itemIdx, 1 )));
                        }
                    };
                    //Place the coupons at the end of all the cart items
                    Array.prototype.push.apply(cartItems, cartCouponItems);
                    //Array.prototype.push.apply(cartItems, cartuomItems);
                }
                
                this.set(this.parse(cartModelData));
                
                console.log("Cart Items: "+JSON.stringify(cartModelData['ECartItemsS']));
                
                this.set('ECartItemsS', new CCRZ.collections.CartItems(cartModelData['ECartItemsS']));
                
                if(!CCRZ.pagevars.isGuest) {
                    this.set("currentUser", CCRZ.currentUser);
                } else {
                    this.set("currentUser", {} );
                }
                
            },
            processMinor : function(cartItem, cartModelData, cartItemMap){
                var parentItem = cartItemMap[cartItem['parentCartItem']];
                cartItem['parentProductType'] = parentItem['productType'];
                var minorData = parentItem['minorData'];
                var currentUom = cartItem['unitOfMeasure'];
                var lastUom;
                
                console.log("parentItem"+ JSON.stringify(parentItem));
                //console.log("cartItem"+ JSON.stringify(cartItem));
                // console.log("lastUomNew"+ parentItem['lastUom']);
                console.log("currentUom"+ currentUom);
                
                
                if(parentItem['pricingType'] != 'external') {
                    var cTot = Number(cartItem['price']);
                    var qty = parseInt(cartItem['quantity']);
                    var absDisc = (isNaN(cartItem['absoluteDiscount'])) ? 0.00 : Number(cartItem['absoluteDiscount']);
                    //console.log("ParentQtyCheckIn"+ parentItem['childQty']);
                    //console.log("QtyCheckIn"+ qty);
                    if (null != cTot && qty != null) {
                        cTot = (cTot - absDisc) * qty;
                        if (parentItem['pricingType'] == "attrGroup") {
                            if(parentItem['lastUom']!= currentUom){
                                if (parentItem['childQty']) {
                                    parentItem['childQty'] = parentItem['childQty'] + qty;
                                } else {
                                    parentItem['childQty'] = qty;
                                }
                                parentItem['quantity'] = parentItem['childQty'];
                            }
                        }
                    }
                    //console.log("parentItem['quantity'] Check"+ parentItem['quantity']);
                    
                    var parentPrice = (isNaN(parentItem['price'])) ? 0.00 : Number(parentItem['price']);
                    var parentQty = (isNaN(parentItem['quantity']) || parentItem['pricingType'] == "attrGroup") ? 1 : Number(parentItem['quantity']);
                    lastUom = currentUom;
                    //console.log("lastUom" + lastUom);
                    parentItem['lastUom'] = lastUom;
                    
                    parentItem['subAmount'] = Number(parentItem['subAmount']) + Number(cartItem['subAmount']);
                    if (parentItem['pricingType'] == "attrGroup") {
                        //console.log("Parent Price" + Price);
                        //parentItem['price'] = parentItem['subAmount'];
                        if(parentItem['price'] != 0)
                        {
                            parentItem['price'] = cartItem['price'] + parentItem['price'];
                            //console.log("Inside if check"+ parentItem['price']);
                            parentItem['uomTotal'] = parentItem['price'];
                            //console.log("Inside if uom check"+ parentItem['uomTotal']);
                        }
                        else
                        {
                            parentItem['price'] = cartItem['price'];
                        }
                    }else{
                        parentItem['price'] = (parentPrice + (cTot / (parentQty))).toFixed(2);
                    }
                    parentItem['itemTotal'] = parentItem['subAmount'];
                    
                    cartItem['UOMTotal'] = parentItem['uomTotal'];
                    // minorData.push(cartItem['UOMTotal']);
                    //console.log("Outside uom check"+ JSON.stringify(cartItem));
                    //Array.prototype.push.apply(cartModelData, cartItem);
                }
                
                if(minorData) {
                    minorData.push(cartItem);
                } else {
                    minorData = [cartItem];
                }
                
                parentItem['minorData'] = minorData;
                parentItem['showIncludedItems'] = true;
                //console.log("Outside uom check"+ JSON.stringify(parentItem['minorData']));
                
            },
            processSubscriptions : function(cartItem, sptMap, cartModelData){
                var spt = sptMap[cartItem['subProdTerm']];
                if(spt){
                    cartItem['upfrontPricePercentage'] = (spt['upfrontPricePercentage'])?spt['upfrontPricePercentage'].toString():null;
                    cartItem['recurringPricePercentage'] = (spt['recurringPricePercentage'])?spt['recurringPricePercentage'].toString():null;
                    
                    if(spt['modifierSubscriptions']) {
                        var modList = spt['modifierSubscriptions'];
                        
                        for(var i = modList.length; i--;){
                            var modSPT = modList[i];
                            
                            if(modSPT['orderCount']){modSPT['orderCount'] = modSPT['orderCount'].toString();}
                            if(modSPT['sequence']){modSPT['sequence'] = modSPT['sequence'].toString();}
                            if(modSPT['upfrontPricePercentage']){modSPT['upfrontPricePercentage'] = modSPT['upfrontPricePercentage'].toString();}
                            if(modSPT['recurringPricePercentage']){modSPT['recurringPricePercentage'] = modSPT['recurringPricePercentage'].toString();}
                            
                            if(modSPT['ignoreInstallmentFrequencyFields']){modSPT['ignoreInstallmentFrequencyFields'] = 'true';}
                            else{modSPT['ignoreInstallmentFrequencyFields'] = 'false';}
                            
                            if(modSPT['autoRenew']){modSPT['autoRenew'] = 'true';}
                            else{modSPT['autoRenew'] = 'false';}
                        }
                        
                        if(spt['modifierSubscriptions']){
                            cartItem['upfrontPricePercentage'] = (modList[0]['upfrontPricePercentage'])?modList[0]['upfrontPricePercentage'].toString():null;
                            cartItem['recurringPricePercentage'] = (modList[0]['recurringPricePercentage'])?modList[0]['recurringPricePercentage'].toString():null;
                        }
                    }
                    
                    //Stitch this SPT in to the cartItem after processing it
                    cartItem['sptMap'] = spt;
                }
            },
            saveChanges: function(skipAutoCalc, callback) {
                var hasChanged = this.checkForChanges();
                if (hasChanged) {
                    var model = this;
                    var messages = ('messages' in model.attributes) ? model.unset('messages') : [];
                    var cartjson = JSON.stringify(model.toJSON());
                    $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//custom Loader added
                    
                    this.invokeContainerLoadingCtx($('.deskLayout'), 'updateCart', cartjson, function(response, event){
                        model.set('messages', (response && response.messages)?response.messages:[]);
                        $("#overlay").remove();//line added
                        
                        if (response.success) {
                            model.fetch(skipAutoCalc, callback);
                        } else {
                            callback(response);
                        }
                    }, {timeout: 120000});
                }
            },
            saveAndProcess: function(skipAutoCalc, callback) {
                var model = this;
                var messages = ('messages' in model.attributes) ? model.unset('messages') : [];
                var cartjson = JSON.stringify(this.toJSON());
                var desklayout = $('.deskLayout');
                // prerequisite is that updateCart has been performed in saveAndCheckout
                model.invokeContainerLoadingCtx(desklayout, 'saveCart', function(response, event) {
                    model.set('messages', (response && response.messages)?response.messages:[]);
                    callback(response);
                }, {timeout: 120000});
            }
        });
        
        CCRZ.views.CartDetailView = CCRZ.CloudCrazeView.extend({
            templatePhone : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.phone.tmpl),
            templateDesktop : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.desktop.tmpl),
            viewName : "CustomCartDetailView",
            className: 'cc_ctrl_Cart3',
            init: function() {
                var v = this;
                this.params = new Object();
                this.attrQtyChanged = false;
                this.params.skipAutoCalc = !CCRZ.pagevars.storeSettings['AutoCalcPriceAdjust__c'];
                this.params.sortBy = 'sfid';
                this.params.hasChanged = false;
                this.pickerView = _.isUndefined(CCRZ.views.wishlistPickerModal)?false:(new CCRZ.views.wishlistPickerModal());
                Handlebars.registerPartial("addressDisplay", $("#AddressDisplay").html());
                if(CCRZ.disableAdaptive) {
                    Handlebars.registerPartial("attributesDisplay", $(CCRZ.uiProperties.CartDetailView.partials.attributesDisplay).html());
                }
                
                Handlebars.registerPartial("headerSection", $(CCRZ.uiProperties.CartDetailView.partials.headerSection).html());
                Handlebars.registerPartial("cartItemsDesktop", $(CCRZ.uiProperties.CartDetailView.partials.cartItemsDesktop).html());
                Handlebars.registerPartial("cartItemAdditional", $(CCRZ.uiProperties.CartDetailView.partials.cartItemAdditional).html());
                Handlebars.registerPartial("cartItemComment", $(CCRZ.uiProperties.CartDetailView.partials.cartItemComment).html());
                Handlebars.registerPartial("cartItemsQty", $(CCRZ.uiProperties.CartDetailView.partials.cartItemsQty).html());
                Handlebars.registerPartial("emailModal", $(CCRZ.uiProperties.CartDetailView.partials.emailModal).html());
                Handlebars.registerPartial("actionsTotals", $(CCRZ.uiProperties.CartDetailView.partials.actionsTotals).html());
                Handlebars.registerPartial("wishModal", $(CCRZ.uiProperties.CartDetailView.partials.wishModal).html());
                Handlebars.registerPartial("rfqModal", $(CCRZ.uiProperties.CartDetailView.partials.rfqModal).html());
                
                if(!CCRZ.disableAdaptive) {
                    Handlebars.registerPartial("cartItemsMobile", $(CCRZ.uiProperties.CartDetailView.partials.cartItemsMobile).html());
                }
                
                this.model.priceFetch(this.params.skipAutoCalc, function(response){
                    CCRZ.pubSub.trigger("action:"+v.viewName+":cartItemsRefreshed", this);
                    console.log('TDBG cartChange ',CCRZ.pagevars.currentCartID);
                    if (CCRZ.pagevars.currentCartID) {
                        CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                    }
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    const urlParams = new URLSearchParams(window.location.search);
                    var isReorder = urlParams.get('reOrder') === "true";
                    var isRevised = urlParams.get('isRevise') === "true";
                    var revisePA = (new URLSearchParams(window.location.search)).get('revisePA');
                    var isReload = urlParams.get('reload') === "true";
                    var isOrderReload = urlParams.get('orderReload') === "true";
                    
                    if (isOrderReload) {
                        CCRZ.pubSub.trigger('cartChange', null);
                        console.log('reorder ',urlParams.get('orderId'));
                        //CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                        
                        remoteCall.invokeCtx('reorder', urlParams.get('orderId'),
                                             function (reorder, err) {
                                                 console.log('reorder invoked');
                                                 console.log('err ',err);
                                                 setTimeout(function () {
                                                    let urlAfterReload = CCRZ.pagevars.currentPageURL.replace('&orderReload=true','');
                                                    console.log('urlAfterReload ',urlAfterReload);
                                                    window.location.href = urlAfterReload;
                                                 }, 3000);
                                             }, {
                                                 nmsp: false, escape: false
                                             }
                                            );
                    } else if (!isReload){
                        console.log('normal rendered');
                        v.render();
                    }
                    
                    if (isReload) {
                        CCRZ.pubSub.trigger('cartChange', null);
                        remoteCall.invokeCtx('priceAgreementToModifiedCart', (new URLSearchParams(window.location.search)).get('revisePA'),isRevised,
                                             function (paToModified, err) {
                                                 console.log('isRevised ',isRevised);
                                                 console.log('modified',(new URLSearchParams(window.location.search)).get('revisePA'));
                                                 console.log('err ',err);
                                                 setTimeout(function () {
                                                    let urlAfterReload = CCRZ.pagevars.currentPageURL.replace('&reload=true','');
                                                    console.log('urlAfterReload ',urlAfterReload);
                                                    window.location.href = urlAfterReload;
                                                 }, 3000);
                                                 
                                                 // location.reload();
                                                 
                                             }, {
                                                 nmsp: false, escape: false
                                             }
                                            );
                    } else if (!isOrderReload){
                        console.log('normal rendered');
                        v.render();
                    }
                });
                
                CCRZ.pubSub.on("action:"+v.viewName+":refresh", function(inpMessages){
                    v.model.priceFetch(v.params.skipAutoCalc, function(response){
                        console.log('TDBG');
                        CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                        v.render();
                        CCRZ.pubSub.trigger('pageMessage', inpMessages);
                    });
                });
            },
            events: {
                'click .updateCartButton': 'saveCart',
                'click .closeModal': 'closeRemoveModal',
                'click .revertCloseModal': 'closeRevertRemoveModal',
                'click .removeItemButton': 'removeItem',
                'click .removeAttributeItemButton': 'removeAttributeItem',
                //'click .checkOutBtn' : 'goToCheckout',
                'click .checkOutBtnNewBehavior' : 'goToCheckoutNewBehavior',
                'click .getExtPricingButton': 'fetchExternalPricing',
                'click .continueShoppingButton': 'gotoHomePage',
                "click .plus" : "addSingleQty",
                "click .minus" : "removeSingleQty",
                "click .plusFF" : "addSkipQty",
                "click .minusFF" : "removeSkipQty",
                'click .prodLink' : 'gotoProductDetail',
                "click .saveComment" : "updateItemComment",
                "blur  .saveRequestedDeliveryDate" : "updateItemRequestedDeliveryDate",
                'click #sendEmailBtn' : 'sendEmail',
                'click .cc_prt_cart_button' : 'fetchPricingTiers',
                'keypress .input-text.entry' : 'qtyKeyPress',
                'change .input-text.entry' : 'changeQuantity',
                "click #addCouponBtn" : "addCoupon",
                "keypress #addCouponId" : "addCouponKey",
                "click #clearCouponBtn" : "clearCoupon",
                "click .cart_sort_item" : "performSort",
                "click .createWishlist" : "createWishlist",
                "click .js-rfq-submit"  : "submitRFQ",
                "click .gp_attribute_items_link": "saveOriginalQuantity",
                "click .cc_included_items_link": "displayIncludedItems",
                "blur  .saveTypeMarks" : "updateItemTypeMarks"
            },
            renderDesktop: function() {
                var v = this;
                this.setElement($(CCRZ.uiProperties.CartDetailView.desktop.selector));
                $(CCRZ.uiProperties.CartDetailView.phone.selector).html('');
                v.$el.html(v.templateDesktop(v.model.toJSON()));
            },
            postRender: function() {
                var view = this;
                //needed for auto qty change messages after order validate
                if(messageObj.messages.length > 0){
                    CCRZ.pubSub.trigger('pageMessage', messageObj);
                    setTimeout(() => {
                        CCRZ.pubSub.trigger('pageMessage', messageObj);
                        messageObj = {messages: []};
                               }, 50);
                }
                
                //Need this for Request for Quote Validation
                this.initValidationDesktop();
                if(this.pickerView){
                    this.pickerView.render();
                }
                if (this.model.attributes && this.model.attributes.messages) {
                    CCRZ.pubSub.trigger("pageMessage", this.model.attributes);
                }
                if($('.cc_invalid').length) {
                    $('.cc_invalid').addClass('alert alert-danger');
                }
                
                // Remove disabled atrribute from price agreement field for distributor Acc. By Sameer Mahadik on(3/25/2021)
                if(CCRZ.currentUser && CCRZ.currentUser.GEAccountGroup !== 'ZEAG'){
                    $(".priceAgreementSearchText").removeAttr("disabled");
                }
                
                console.log("Post Render Called");
            },
            initValidationDesktop : function() {
                jQuery('#rfqForm').validate({
                    invalidHandler : function(event, validator) {
                        CCRZ.handleValidationErrors(event, validator, 'messagingSection-rfq-Error', false);
                    },
                    rules : {
                        rfq_first_name      : { required : CCRZ.getPageConfig('rfq.fNameRqrd', true) },
                        rfq_last_name      : { required : CCRZ.getPageConfig('rfq.lNameRqrd', true) },
                        rfq_email       : { required : CCRZ.getPageConfig('rfq.emailRqrd', true), email: CCRZ.getPageConfig('rfq.emailVldt', true) },
                        rfq_company      : { required : CCRZ.getPageConfig('rfq.cmpnyRqrd', true) },
                        rfq_phone       : { required : CCRZ.getPageConfig('rfq.phnRqrd', true) },
                        rfq_description     : { maxlength : CCRZ.getPageConfig('rfq.descMaxLen', 32000) }
                    },
                    messages : {
                        rfq_first_name      : { required : 'RFQ_FIRST_NAME_IS_REQUIRED' },
                        rfq_last_name      : { required : 'RFQ_LAST_NAME_IS_REQUIRED' },
                        rfq_email       : { required : 'RFQ_EMAIL_IS_REQUIRED', email : 'RFQ_INVALID_EMAIL_FORMAT' },
                        rfq_company      : { required : 'RFQ_COMPANY_NAME_IS_REQUIRED' },
                        rfq_phone       : { required : 'RFQ_PHONE_IS_REQUIRED' }
                    },
                    errorPlacement: function(error, element) {
                    }
                });
            },
            submitRFQ: function(event) {
                if (jQuery('#rfqForm').valid()) {
                    var objLink = $(event.currentTarget);
                    loading(objLink);
                    var rfqForm = $("#rfqForm").serializeObject();
                    var rfqBean = {
                        firstName : rfqForm.rfq_first_name,
                        lastName : rfqForm.rfq_last_name,
                        company : rfqForm.rfq_company,
                        email : rfqForm.rfq_email,
                        phone : rfqForm.rfq_phone,
                        description : rfqForm.rfq_description
                    };
                    this.className = 'cc_ctrl_Cart3';
                    this.invokeContainerLoadingCtx($('.deskLayout'), 'createRequestForQuote', rfqBean, function (response, event) {
                        doneLoading(objLink);
                        if (response.success) {
                            CCRZ.pubSub.trigger("cart:rfqSubmitted",response.data);
                            $(".messagingSection-rfq-Error").empty();
                            $("#rfqForm").trigger('reset');
                            $("#rfqModal").modal('hide');
                        } else {
                            response.clearInclSectionsOnly = true;
                            CCRZ.pubSub.trigger("pageMessage", response);
                        }
                    });
                    
                }
            },
            updateItemComment: function(event) {
                console.log('ind',event)
                var objLink = $(event.currentTarget);
                var id = objLink.data("id");
                var items = this.model.get('ECartItemsS');
                var formData = form2js('commentsForm' + id, '.', false, function(node) {}, false, true);
                var matchingLines = items.where({'sfid': id });
                if (matchingLines && matchingLines.length > 0) {
                    matchingLines[0].set('comments', formData.note);
                }
                $("#comments_" + id).modal("hide");
                this.params.hasChanged = true;
                this.saveCart(event);
            },
            updateItemRequestedDeliveryDate: function(event) {
                if (!rqDateChanged) {
                    return;
                }
                rqDateChanged = false;
                var objLink = $(event.currentTarget);
                var id = objLink.data("id");
                var items = this.model.get('ECartItemsS');
                var formData = form2js('requestedDeliveryDateForm' + id, '.', false, function(node) {}, false, true);
                var matchingLines = items.where({'sfid': id });
                if (matchingLines && matchingLines.length > 0) {
                    matchingLines[0].set('requestedDeliveryDate', formData.requestedDeliveryDate);
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'updateRequestedDeliveryDate', id, formData.requestedDeliveryDate, isSample, (res, err)  => {
                        if (res.success) {
                    } else {
                                                         }
                                                         }, {
                                                         nmsp: false, escape: false
                                                         });
                }
                $("#requestedDeliveryDate_" + id).modal("hide");
                this.params.hasChanged = true;
                this.saveCart(event);
            },
            updateItemTypeMarks: function(event) {
                if (!typeMarkChanged) {
                    return;
                }
                typeMarkChanged = false;
                var objLink = $(event.currentTarget);
                var id = objLink.data("id");
                var items = this.model.get('ECartItemsS');
                var formData = form2js('typeMarksForm' + id, '.', false, function(node) {}, false, true);
                var matchingLines = items.where({'sfid': id });
                if (matchingLines && matchingLines.length > 0) {
                    matchingLines[0].set('typeMarks', formData.typeMarks);
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'updateTypeMarks', id, formData.typeMarks, isSample, (res, err)  => {
                        if (res.success) {
                    } else {
                                                         }
                                                         }, {
                                                         nmsp: false, escape: false
                                                         });
                }
                $("#typeMarks_" + id).modal("hide");
                this.params.hasChanged = true;
                this.saveCart(event);
            },
            qtyKeyPress: function(event) {
                return CCRZ.util.isValidNumericInput(event);
            },
            changeQuantity: function(event) {
                var objLink = $(event.target);
                var matchId = objLink[0].getAttribute("id").replace("entry_", "");
                var qty = parseInt(objLink.val());
                
                var scrubbedQty = CCRZ.util.scrubQuantity(qty);
                var revertQty = false;
                //based on page config...if true allow 0s else revert 0s
                if(CCRZ.pagevars.pageConfig.isTrue('c.noqty')){
                    revertQty = (qty !== scrubbedQty);
                }else{
                    revertQty = (qty !== scrubbedQty || qty < 1);
                }
                
                if(revertQty) {
                    CCRZ.pubSub.trigger("pageMessage", CCRZ.createPageMessage('WARN', "messagingSection-Warning", 'Invalid_Qty'));
                    this.revertItemQty(matchId, objLink);
                } else {
                    //this.updateItemQty(event, matchId, scrubbedQty);
                    this.customQuantChange(event);
                }
            },
            addSingleQty : function(event){
                this.customQuantInc(event);
                //this.adjustQty(event, 1, '.item_qtyIncrement');
                
            },
            removeSingleQty : function(event){
                this.customQuantDecr(event);
                //this.adjustQty(event, -1, '.item_qtyIncrement');
            },
            addSkipQty : function(event){
                this.adjustQty(event, 1, '.item_qtySkipIncrement');
            },
            removeSkipQty : function(event){
                this.adjustQty(event, -1, '.item_qtySkipIncrement');
            },
            adjustQty: function(event, direction, multipler) {
                var p = $(event.currentTarget).parent();
                if(CCRZ.disableAdaptive) {
                    p = $(event.currentTarget).closest( ".gp_quantity_block");
                }
                var objItems = p.find(".entry");
                if (objItems) {
                    var incr = p.find(multipler);
                    var increment = 1;
                    if (incr){
                        increment = parseInt(incr.val());
                    }
                    var qty = parseInt(objItems.val());
                    if ((direction > 0 || qty >= increment) && multipler=='.item_qtySkipIncrement'){
                        qty = qty + direction*increment;
                    }else{
                        qty = qty + direction;
                    }
                    
                    if(CCRZ.pagevars.pageConfig.isTrue('c.noqty')){
                        //allow 0 and update the qty
                        objItems.val(qty);
                        this.updateItemQty(event, p.data("id"), qty);
                    }else{
                        //only update if the qty is greater than 0
                        if(qty > 0){
                            objItems.val(qty);
                            this.updateItemQty(event, p.data("id"), qty);
                        }
                    }
                }
            },
            updateItemQty: function(event, matchId, qty) {
                if(!qty) {
                    qty = 0;
                }
                var items = this.model.get('ECartItemsS');
                var matchingLines = items.where({'sfid': matchId });
                if (matchingLines && matchingLines.length > 0) {
                    //only set the previous quantity if the quantity is not 0
                    if (matchingLines[0].get('quantity') > 0) {
                        matchingLines[0].set('previousQuantity', matchingLines[0].get('quantity'));
                    }
                    matchingLines[0].set('quantity', qty);
                } else {
                    this.updateAttributeItemQty(event, matchId, qty);
                }
                this.updateTiersSelection(matchId, qty);
                this.params.hasChanged = true;
            },
            revertItemQty: function(matchId, qtyInput) {
                // revert the qty input text to the qty in the model for the given item
                var items = this.model.get('ECartItemsS');
                var matchingLines = items.where({'sfid': matchId });
                if(matchingLines && matchingLines.length > 0){
                    qtyInput.val(matchingLines[0].get('quantity'));
                } else {
                    this.revertAttributeItemQty(matchId, qtyInput);
                }
            },
            revertAttributeItemQty: function(matchId, qtyInput) {
                var attributeItems = this.model.get('ECartItemsS').where({pricingType: "attrGroup"});
                if(attributeItems) {
                    return _.each(attributeItems, function(item) {
                        _.each(item['minorLines'], function(line){
                            if(line.sfid === matchId){
                                qtyInput.val(line.quantity);
                            }
                        });
                    });
                }
            },
            updateAttributeItemQty: function(event, matchId, qty) {
                var view = this;
                var p;
                if(CCRZ.disableAdaptive) {
                    p = $(event.target).closest( ".gp_quantity_block");
                }
                var objLink = p.find(".entry");
                var attributeItems = this.model.get('ECartItemsS').where({pricingType: "attrGroup"});
                if(attributeItems) {
                    this.attrQtyChanged = true;
                    // if qty changed but not upated, revert qty upon closing of modal
                    $('.gp_cart_attribute_items_modal').on('hidden.bs.modal', function (e) {
                        if(view.attrQtyChanged) {
                            return _.each(attributeItems, function(item) {
                                _.each(item['minorLines'], function(line){
                                    if(line.sfid === matchId){
                                        objLink.val(line.originalQuantity);
                                        line.quantity = line.originalQuantity;
                                        item.attrQtyChanged = false;
                                    }
                                });
                            });
                        }
                        view.attrQtyChanged = false;
                    });
                    return _.each(attributeItems, function(item) {
                        _.each(item['minorLines'], function(line){
                            if(line.sfid === matchId){
                                line.previousQuantity = line.quantity;
                                line.quantity = qty;
                                item.attrQtyChanged = true;
                            }
                        });
                    });
                }
            },
            updateTiersSelection : function(selId, qty){
                var tierList = $('.cc_prt_sel_'+selId);
                if(!_.isEmpty(tierList)){
                    $('.cc_prt_sel_'+selId).removeClass('cc_prt_tier_box_selected bg-info').addClass('cc_prt_tier_box_unselected');
                    _.each(tierList, function(currentTier) {
                        if(parseFloat(currentTier.dataset.qty) <= parseFloat(qty) && ((currentTier.dataset.max === null || currentTier.dataset.max === undefined) || currentTier.dataset.max.trim().length === 0 || parseFloat(currentTier.dataset.max) >= parseFloat(qty))){
                            $('.cc_prt_sel_'+selId+'_'+currentTier.dataset.qty).removeClass('cc_prt_tier_box_unselected').addClass('cc_prt_tier_box_selected bg-info');
                        }
                    });
                }
            },
            removeItem: function(event) {
                var objLink = $(event.currentTarget);
                var parentElement = objLink.parents(".cart_item");
                var sfid = objLink.data("id");
                var view = this;
                var cartId = view.model.get('sfid');
                // Remove Deleted Product From Cartitems Object By Sameer Mahadik On(7-2-2021)
                var currentCartItems = CCRZ.cartDetailModel.attributes.ECartItemsS.models;
                currentCartItems = currentCartItems.filter(function(item){ return item.id != sfid });
                
                view.invokeContainerLoadingCtx($('.deskLayout'), 'removeItem', cartId, sfid, function (response, event) {
                    if (response.success && event.status) {
                        parentElement.fadeOut(2500);
                        view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                            console.log('TDBG');
                            CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                            CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                            console.log('view.render');view.render();
                        });
                        // Reassigned Updated Cart Items To Objects By Sameer Mahadik On(7-2-2021)
                        CCRZ.cartDetailModel.attributes.ECartItemsS.models = currentCartItems;
                    }
                }, {escape: false, timeout: 120000});
                
            },
            removeAttributeItem: function(event) {
                var objLink = $(event.currentTarget);
                var parentElement = objLink.parents(".cart_item");
                var sfid = objLink.data("id");
                var parentId = objLink.data("group");
                var view = this;
                var cartId = view.model.get('sfid');
                var attributeItems = this.model.get('ECartItemsS').where({sfid: parentId});
                
                view.invokeContainerLoadingCtx($('.deskLayout'), 'removeItem', cartId, sfid, function (response, event) {
                    if (response.success && event.status) {
                        view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                            console.log('TDBG');
                            CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                            CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                            console.log('view.render');view.render();
                        });
                    }
                }, {escape: false, timeout: 120000});
                
            },
            openRemoveModal: function(event, zeroValues, isCheckout) {
                var objLink = $(event.currentTarget);
                var modalData = {"zeroValues":zeroValues, "isCheckout":isCheckout};
                var modalView = new CCRZ.views.removeModal();
                modalView.render(modalData, function() {
                    $('#removeMod').modal({ keyboard: false, backdrop: 'static', show: true });
                });
            },
            closeRemoveModal: function(event){
                //called when closing the modal, and allowing 0 to remove the items from the cart
                var view = this;
                var objLink = $(event.currentTarget);
                //if this is a checkout, then save the model a bit differently and then call checkout
                if(objLink.data("ischeckout")){
                    this.saveAndCheckout(event);
                }else{
                    //actaully save the model which will remove the items with 0 from the cart
                    this.saveToModel(event);
                }
                
                //close the modal
                $('#removeMod').modal('hide');
            },
            closeRevertRemoveModal: function(event){
                //called when we first have to revert to the previous value
                var objLink = $(event.currentTarget);
                var zeroValues = objLink.data("zeros");
                //for each zeroValue, revert the value to the previous quantity
                for(index = 0; index < zeroValues.length; index++){
                    //set to the previous quantity, first get the element
                    qtyElement = $('#entry_'+zeroValues[index]['sfid']);
                    qtyElement.val(zeroValues[index].previousQuantity);
                    qtyElement.change();
                }
                //now with the 0s removed, we can Call the existing save cart function and it will update the model
                this.saveToModel(event);
                //close the modal
                $('#removeMod').modal('hide');
            },
            saveCart : function(event){
                if($('.gp_cart_attribute_items_modal').hasClass('in')) {
                    $('.gp_cart_attribute_items_modal').modal('hide');
                }
                if(isSample==true){
                    //
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'updateSampleOrder', isSample, (res, err)  => {
                        //  $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                        if (res.success) {
                        //$("#overlay").remove();//line added
                    } else {
                                                         }
                                                         }, {
                                                         nmsp: false, escape: false
                                                         });
                }
                
                var view = this;
                if(CCRZ.pagevars.pageConfig.isTrue('c.noqty') && CCRZ.pagevars.pageConfig.isTrue('c.vernoqty')){
                    //find any items in the model with quantity 0
                    var items = this.model.get('ECartItemsS');
                    var zeroValues = items.filter(function(item){return ( item.get('quantity') === 0 || item.get('quantity') === '0'); });
                    //if we found an 0 quantites, then open the modal
                    if(zeroValues.length > 0){
                        //popup the modal
                        this.openRemoveModal( event, zeroValues, false);
                        //else just go ahead and save the changes to the model
                    } else {
                        this.saveToModel(event);
                    }
                } else {
                    this.saveToModel(event);
                }
            },
            fetchExternalPricing: function(event) {
                var view = this;
                var desklayout = $('.deskLayout');
                // prerequisite is that updateCart has been performed in saveAndCheckout
                view.invokeContainerLoadingCtx(desklayout, 'priceCart', true, function(response, event) {
                    if (response.success) {
                        view.model.fetch(true, function(response) {
                            CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", this);
                            console.log('TDBG');
                            CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                            console.log('view.render');view.render();
                        });
                    } else {
                        CCRZ.pubSub.trigger("pageMessage", response);
                    }
                }, {timeout: 120000});
            },
            saveToModel : function(event){
                var view = this;
                if (view.params.hasChanged) {
                    this.model.saveChanges(this.params.skipAutoCalc, function(response){
                        if (response.success) {
                            //updateSampleOrder
                            this.attrQtyChanged = false;
                            console.log('view.render');view.render();
                            console.log('TDBG');
                            CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                            view.params.hasChanged = false;
                        }
                        CCRZ.pubSub.trigger("pageMessage", response);
                    });
                }
            },
            goToCheckout: function(event) {
                //Probably old code -- Not being used
                var view = this;
                var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'validateOrderBeforeCheckout', (res, err)  => {
                    if (res.success) {
                    if (view.params.hasChanged) {
                    if(CCRZ.pagevars.pageConfig.isTrue('c.noqty') && CCRZ.pagevars.pageConfig.isTrue('c.vernoqty')) {
                    //we need to popup the conf dialog
                    //find any items in the model with quantity 0
                    var items = view.model.get('ECartItemsS');
                    var zeroValues = items.models.filter(function(item){return ( item.get('quantity') === 0 || item.get('quantity') === '0'); });
                
                //if we found an 0 quantites, then open the modal
                if(zeroValues.length > 0){
                    //popup the modal
                    this.openRemoveModal( event, zeroValues, true);
                    //else just go ahead and save the changes to the model
                }else{
                    this.saveAndCheckout(event);
                }
            }else{
            this.saveAndCheckout(event);
        }
                                                               
                                                               }
                                                               else {
                                                               if(view.model.attributes.allowCheckout && !view.model.attributes.preventCheckout) {
            view.model.saveAndProcess(view.params.skipAutoCalc, function(response) {
                if (response.success) {
                    view.determineCOFlow(event);
                }
                CCRZ.pubSub.trigger("pageMessage", response);
            });
        }
    }
           } else {
           }
           }, {
           nmsp: false, escape: false, timeout: 120000
           });
    },
        goToCheckoutNewBehavior: function(event) {
            if(event.currentTarget.id=='requestOrder' && $('.soldToSearchText').val().length==0){
                
                CCRZ.pubSub.trigger("pageMessage", CCRZ.createPageMessage('ERROR', 'messagingSection-Error', 'Sold To Account Missing'));
                $(window).scrollTop({ top: 0, left: 0,  behavior: 'smooth' });
                return;
            }
            
            var view = this;
            var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            
            var soldTo = $('.soldToSearchText').val().toLowerCase();
            console.log('SOLD TO IS SET as ' + soldTo);
            var soldToId;
            if(view.model.attributes.soldToAccounts!=undefined){
                view.model.attributes.soldToAccounts.forEach(function(acct){
                    currentTarget = acct.Name.toLowerCase();
                    if(currentTarget == soldTo) soldToId = acct.Id;
                });
            }
            console.log('reee',soldToId, CCRZ.cartDetailModel.attributes.soldToAccount);
            if(soldToId != CCRZ.cartDetailModel.attributes.soldToAccount){
                console.log('changing sold to...');
                // $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', soldToId, CCRZ.cartDetailModel.attributes.sfid, (res, err)  => {
                    // $("#overlay").remove();//line added
                    if (res.success) {
                    CCRZ.cartDetailModel.attributes.soldToAccount = soldToId;
                }
                                                     else{
                                                     }
                                                     }, {
                                                     nmsp: false, escape: false, timeout: 120000
                                                     });
            }
            
            
            var items = view.model.get('ECartItemsS');
            var ciIdQty='';
            for(var i=0;i<items.length;i++){
                ciIdQty+=items.models[i].attributes.sfid+':'+items.models[i].attributes.quantity+',';
            }
            
            //if($('.priceAgreementSearchText').val().length != 0){
            //    console.log('Before applyPricingHeader');
            //    $(".applyPricingHeader").trigger( "click" );
            //    console.log('After applyPricingHeader');
            //}

            //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
            remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'updateCartItems', ciIdQty, (res, err)  => {
                $("#overlay").remove();//line added for custom loader
                if (res.success) {
                
            }
                else{
            }
            }, {
                nmsp: false, escape: false, timeout: 120000
            });
            
            var priceAgreementNo = '';
            if($('.priceAgreementSearchText').val().length != 0){
                priceAgreementNo = $('.priceAgreementSearchText').val();
                console.log('Applying Agreement: '+priceAgreementNo);
            }
            remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'validateOrderBeforeCheckout', isSample, priceAgreementNo, (res, err)  => {
                console.log('RES ',res);
                if (res.success) {
                    console.log('validate success');
                    // if (view.params.hasChanged) {
                    //                 if(CCRZ.pagevars.pageConfig.isTrue('c.noqty') && CCRZ.pagevars.pageConfig.isTrue('c.vernoqty')) {
                    //                     //we need to popup the conf dialog
                    //                     //find any items in the model with quantity 0
                    //                     var items = view.model.get('ECartItemsS');
                    //                     var zeroValues = items.models.filter(function(item){return ( item.get('quantity') === 0 || item.get('quantity') === '0'); });
                    
                    //                     //if we found an 0 quantites, then open the modal
                    //                     if(zeroValues.length > 0){
                    //                         //popup the modal
                    //                         this.openRemoveModal( event, zeroValues, true);
                    //                         //else just go ahead and save the changes to the model
                    //                     }else{
                    //                         this.saveAndCheckout(event);
                    //                     }
                    //                 }else{
                    //                     this.saveAndCheckout(event);
                    //                 }
                    
                    // }
                    //else {
                
                    var items = view.model.get('ECartItemsS');
                    var zeroValues = items.models.filter(function(item){return ( item.get('quantity') === 0 || item.get('quantity') === '0'); });
                
                    //if we found an 0 quantites, then open the modal
                    if(zeroValues.length > 0){
                        //popup the modal
                        this.openRemoveModal( event, zeroValues, true);
                        //else just go ahead and save the changes to the model
                    }
                
                    //console.log(view.model.attributes.allowCheckout, view.model.attributes.preventCheckout);
                    if(res.data != null && res.data!=''){
                        console.log('res.data',res.data);
                        CCRZ.pubSub.trigger("pageMessage", CCRZ.createPageMessage('ERROR', 'messagingSection-Error', res.data));
                        $(window).scrollTop({ top: 0, left: 0,  behavior: 'smooth' });
                        return;
                    } else {
                        if(view.model.attributes.allowCheckout && !view.model.attributes.preventCheckout) {
                            view.model.saveAndProcess(view.params.skipAutoCalc, function(response) {
                                if (response.success) {
                                    view.determineCOFlow(event);
                                }
                                CCRZ.pubSub.trigger("pageMessage", response);
                            });
                        }
                    }
                // }
                } else {
                    if(typeof res.data === 'object'){
                        res.data.forEach(function(itemId){
                            messageObj.messages.push(CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'InvalidOrDelisted').messages[0]);
                        });
                        CCRZ.pubSub.trigger('pageMessage', messageObj);
                    }
                    else if(res.data.indexOf('ERROR:')>=0){
                        var errorMessage=res.data.split(':')[1];
                        $('#shoppingCartError').html(errorMessage);
                        messageObj.messages.push(CCRZ.createPageMessage('ERROR', 'shoppingCartError', errorMessage[1]).messages[0]);
                        CCRZ.pubSub.trigger('pageMessage', messageObj);
                    }
                    else if(res.data.indexOf(',')>=0){
                        var sfidToQty = {};
                        //console.log(res.data);
                        for(var i=0;i<res.data.split(',').length;i++){
                            var errorVar=res.data.split(',')[i].split(':');
                            //$('#'+errorVar[0]+'cartItemError').html(errorVar[1]);

                            // $('#entry_'+errorVar[0]).val(errorVar[2]);
                            // $('#entry_'+errorVar[0]).trigger('change');
                            // var queryString = '';
                            // if(errorVar[0]){
                            //     queryString = '.applyPricing[data-id='+errorVar[0]+']';
                            // }
                            // $(queryString).trigger('click');
                            if(errorVar[0]!=''){
                                //  console.log(errorVar[0]);
                                messageObj.messages.push(CCRZ.createPageMessage('INFO', 'priceAgreementError'+errorVar[0], errorVar[1]).messages[0]);
                                //  console.log(errorVar[1]);
                                sfidToQty[errorVar[0]] = errorVar[2];
                            }
                        }

                        //console.log(sfidToQty);
                        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                        remoteCall.invokeCtx('updateItemQty', JSON.stringify(sfidToQty), function (res) {
                            //console.log('callback');
                            if(res.success){
                                var cartId = CCRZ.pagevars.currentCartID;
                                view.params.hasChanged = true;
                                view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                    console.log('TDBG');
                                    CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                    CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                    console.log('view.render');view.render();
                                });
                            }
                            else{
                                //console.log(res)
                            }
                        }, {
                            nmsp: false, escape: false
                        });             
                        CCRZ.pubSub.trigger('pageMessage', messageObj);
                    }
                    else{
                        CCRZ.pubSub.trigger("pageMessage", response);
                    }
                }
            }, {
                nmsp: false, escape: false
            });
        },
        saveAndCheckout: function(event) {
            var view = this;
            view.model.saveChanges(this.params.skipAutoCalc, function(response) {
                if (response.success) {
                    // go to checkout if there cart items, and allowing checkout, and not preventing checkout
                    if(response.data.ECartItemsS.length != 0 && response.data.allowCheckout && !response.data.preventCheckout) {
                        //go ahead and checkout
                        view.model.saveAndProcess(view.params.skipAutoCalc, function(response) {
                            if (response.success) {
                                view.determineCOFlow(event);
                            }
                            CCRZ.pubSub.trigger("pageMessage", response);
                        });
                    } else {
                        //re-render view
                        console.log('TDBG');
                        CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                        //reset that a change has been made
                        view.params.hasChanged = false;
                        console.log('view.render');view.render();
                    }
                }
                CCRZ.pubSub.trigger("pageMessage", response);
            });
        },
            determineCOFlow: function(event){
                var view = this;
                //if use LLI is set to TRUE, enter LLI checkout flow
                //if use LLI is set to FALSE, enter default checkout flow
                var co = checkout;
                if (CCRZ.ga) {
                    CCRZ.ga.handleCartCheckout({'cartId': CCRZ.pagevars.currentCartID}, co);
                } else {
                    co();
                }
            },
                sendEmail: function(event) {
                    loading($(event.currentTarget));
                    var emailForm = $("#emailForm").serializeObject();
                    emailForm.typeDesc = "Cart";
                    emailForm.param = "cartId";
                    emailForm.pageName = "cc_CartEmail";
                    emailForm.paramVal = CCRZ.pagevars.currentCartID;
                    this.className = 'cc_ctrl_CartOrderEmailer';
                    this.invokeCtx('sendEmail', emailForm,function() {
                        doneLoading($(event.currentTarget));
                        $("#emailModal").modal('hide');
                    });
                },
                    gotoHomePage: function() {
                        //console.log("gotoHomePage Current URL : ", localStorage.getItem("Current page URL"));
                        window.open(localStorage.getItem("Current page URL"),'_self');
                        
                        if (localStorage.getItem("Current page URL") != null) {
                            window.open(localStorage.getItem("Current page URL"),'_self');
                        } else {
                            window.open('/DefaultStore/ccrz__ProductList', '_self');
                        }
                        
                        /*if (CCRZ.ga) {
                        CCRZ.ga.handleCartContinueShopping({'cartId': CCRZ.pagevars.currentCartID}, homePage);
                    } else {
                        homePage();
                    }*/
                    return false;
                },
                    gotoProductDetail : function(event) {
                        var objLink = $(event.currentTarget);
                        var id = objLink.data("id");
                        productDetails(id);
                        return false;
                    },
                        addCouponKey : function(event){
                            var v = this;
                            if (window.event && window.event.keyCode == 13 || event.which == 13) {
                                v.addCoupon(event);
                                return false;
                            } else {
                                return true;
                            }
                        },
                            addCoupon : function(event){
                                var view = this;
                                this.model.applyCoupon($('#addCouponId').val(), this.params.skipAutoCalc, function(response){
                                    if (response.success) {
                                        console.log('view.render');view.render();
                                        console.log('TDBG');
                                        CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                        if (CCRZ.ga) {
                                            CCRZ.ga.handleApplyCoupon({'couponCode': response.data.couponName});
                                        }
                                    }
                                    else {
                                        response.clearInclSectionsOnly = true;
                                        CCRZ.pubSub.trigger("pageMessage", response);
                                    }
                                });
                            },
                                clearCoupon : function(event){
                                    var view = this;
                                    this.model.clearCoupon(this.params.skipAutoCalc, function(response){
                                        if (response.success) {
                                            console.log('view.render');view.render();
                                            console.log('TDBG');
                                            CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                        }
                                        else
                                            response.clearInclSectionsOnly = true;
                                        CCRZ.pubSub.trigger("pageMessage", response);
                                    });
                                },
                                    displayIncludedItems: function (event) {
                                        var view = this;
                                        var model = view.model;
                                        var objLink = $(event.currentTarget);
                                        var sfid = objLink.data("id");
                                        var qtyRules = model.get('qtyRules');
                                        
                                        var majorItem = view.model.get('ECartItemsS').models.filter(function(item) { return item.get('sfid') === sfid });
                                        majorItem = majorItem[0];
                                        if(majorItem.refetchMinors === true){
                                            majorItem.minorLines = null;
                                            majorItem.refetchMinors = false;
                                        }
                                        
                                        // If this major has no minorLines, then fetch and generate them
                                        if(null == majorItem['minorLines']) {
                                            var minorsIdArray = new Array();
                                            
                                            majorItem.get('minorData').forEach(function (item) {
                                                minorsIdArray.push(item['sfid']);
                                            });
                                            
                                            var minorsIdArrayJSON = JSON.stringify(minorsIdArray);
                                            
                                            view.invokeContainerLoadingCtx($('.deskLayout'), 'fetchMinorCartItemsData', minorsIdArrayJSON, function (response, event) {
                                                if (response.success && event.status) {
                                                    
                                                    var minorsProdData = response.data;
                                                    var minorsAttributeData = minorsProdData['attributeList'];
                                                    minorsProdData = minorsProdData['minorProductList'];
                                                    
                                                    if (null != minorsProdData) {
                                                        majorItem.get('minorData').forEach(function (item) {
                                                            item['product'] = minorsProdData[item['productR']['sfid']];
                                                            
                                                            //If this is an ADC product, stitch in the Attributes
                                                            if (null != minorsAttributeData && !_.isEmpty(minorsAttributeData)) {
                                                                //Put the display names of the attributes in this list on the major for the table headings
                                                                majorItem.topAttributes = [];
                                                                
                                                                //Stitch the attribute data to the products
                                                                if(item['primaryAttr']) {
                                                                    item['primaryAttr'] = minorsAttributeData[item['primaryAttrR']['sfid']];
                                                                    majorItem.topAttributes.push(_.find(minorsAttributeData, function (a) {
                                                                        return a.sfid === item.primaryAttr.parentAttribute;
                                                                    }));
                                                                    //Process Quantity Rules for Attribute Items
                                                                    if (qtyRules && qtyRules[item['product']['SKU']]) {
                                                                        item['qtyIncrement'] = qtyRules[item['product']['SKU']].Increment;
                                                                        item['qtySkipIncrement'] = qtyRules[item['product']['SKU']].SkipIncrement;
                                                                    } else {
                                                                        item['qtyIncrement'] = 1;
                                                                    }
                                                                }
                                                                if(item['secondaryAttr']) {
                                                                    item['secondaryAttr'] = minorsAttributeData[item['secondaryAttrR']['sfid']];
                                                                    majorItem.topAttributes.push(_.find(minorsAttributeData, function (a) {
                                                                        return a.sfid === item.secondaryAttr.parentAttribute;
                                                                    }));
                                                                }
                                                                if(item['tertiaryAttr']) {
                                                                    item['tertiaryAttr'] = minorsAttributeData[item['tertiaryAttrR']['sfid']];
                                                                    majorItem.topAttributes.push(_.find(minorsAttributeData, function (a) {
                                                                        return a.sfid === item.tertiaryAttr.parentAttribute;
                                                                    }));
                                                                }
                                                            }
                                                        });
                                                    }
                                                    
                                                    majorItem['minorLines'] = majorItem.get('minorData');
                                                    var incItemView;
                                                    if(majorItem.get('pricingType') === 'attrGroup'){
                                                        incItemView = new CCRZ.views.attributeItemsBodyView();
                                                    }else{
                                                        incItemView = new CCRZ.views.includedItemsBodyView();
                                                    }
                                                    incItemView.render(sfid, majorItem);
                                                }
                                            }, {escape: false, timeout: 120000});
                                        }
                                        
                                    },
                                        fetchPricingTiers: function(event){
                                            var objLink = $(event.currentTarget);
                                            var view = this;
                                            var cartItem = null;
                                            var prodID = null;
                                            
                                            var cartItems = this.model.get('ECartItemsS');
                                            _.each(cartItems.models, function(cItem) {
                                                if(cItem.get('sfid') === objLink.data("id")){
                                                    cartItem = cItem;
                                                    return false;
                                                }
                                            });
                                            
                                            if(cartItem.tpView && view.tpSubViews){
                                                
                                                if(view.tpSubViews[cartItem.tpView]){
                                                    view.tpSubViews[cartItem.tpView].render(cartItem.get('sfid'), cartItem.get('tiersList'));
                                                }
                                            } else {
                                                prodID = cartItem.get('product').sfid;
                                                
                                                view.invokeContainerLoadingCtx($('.deskLayout'), 'fetchPricingTiers', prodID, function(response, event){
                                                    if (response.success && event.status) {
                                                        
                                                        var qty = $('#entry_'+cartItem.get('sfid')).val();
                                                        var previousTier = null;
                                                        var tierList = [];
                                                        
                                                        _.each(response.data.tiers, function(currentTier) {
                                                            currentTier.itemId = cartItem.get('sfid');
                                                            currentTier.selClass = 'cc_prt_tier_box_unselected';
                                                            currentTier.uoml = cartItem.get('productR').unitOfMeasureLabel;
                                                            if(!_.isEmpty(previousTier)){
                                                                previousTier.max = currentTier.q - 1;
                                                            }
                                                            
                                                            if(currentTier.q <= qty){
                                                                currentTier.selClass = 'cc_prt_tier_box_selected bg-info';
                                                                if(!_.isEmpty(previousTier)){
                                                                    previousTier.selClass = 'cc_prt_tier_box_unselected';
                                                                }
                                                            }
                                                            
                                                            tierList.push(currentTier);
                                                            previousTier = currentTier;
                                                        });
                                                        
                                                        if(!_.isEmpty(tierList)){
                                                            cartItem.set('tiersList', tierList);
                                                            var tpView = new CCRZ.views.tierPricingView();
                                                            tpView.render(cartItem.get('sfid'), tierList);
                                                            if(!view.tpSubViews){
                                                                view.tpSubViews = {};
                                                            }
                                                            view.tpSubViews[tpView.cid] = tpView;
                                                            cartItem.tpView = tpView.cid;
                                                        }
                                                        
                                                    }
                                                    else {
                                                        CCRZ.pubSub.trigger("pageMessage", response);
                                                    }
                                                });
                                            }
                                            
                                        },
                                            createWishlist: function(event) {
                                                var view = this;
                                                var messages = view.model.unset('messages');
                                                var cartjson = JSON.stringify(view.model.toJSON());
                                                $("#wishMod").modal("hide");
                                                var name = $("#wishModName").val();
                                                if (name == ""){
                                                    name = view.model.get("name");
                                                }
                                                
                                                this.className = 'cc_ctrl_Cart3';
                                                this.invokeContainerLoadingCtx($('.deskLayout'), 'createWishlistFromCart', cartjson, name, function(response, event){
                                                    view.model.set('messages', (response && response.messages)?response.messages:[]);
                                                    response.clearInclSectionsOnly = true;
                                                    CCRZ.pubSub.trigger("pageMessage", response);
                                                    if(view.pickerView){
                                                        view.pickerView.refresh();
                                                    }
                                                });
                                            },
                                                performSort: function(event) {
                                                    var objLink = $(event.currentTarget);
                                                    var sortField = objLink.data("sort");
                                                    var items = this.model.get('ECartItemsS');
                                                    console.log("Sort started");
                                                    if (sortField == this.params.sortBy) {
                                                        console.log("Sort then");
                                                        this.model.set('ECartItemsS', new CCRZ.collections.CartItems(items.models.reverse(), {sort: false}));
                                                    }
                                                    else {
                                                        console.log("Sort else");
                                                        items.changeSort(sortField);
                                                        items.sort();
                                                        this.params.sortBy = sortField;
                                                    }
                                                    this.render();
                                                    return false;
                                                }
    });
    
    CCRZ.models.CartItemDetail = CCRZ.CloudCrazeModel.extend({
        idAttribute : "sfid"
    });
    
    CCRZ.collections.CartItems = CCRZ.CloudCrazeCollection.extend({
        model: CCRZ.models.CartItemDetail,
        comparator: function (property) {
            
            return function (item) { return item.get("sfid"); };
        },
        strategies: {
            name: function (item) { return item.get("product").sfdcName; },
            sku: function (item) { return item.get("product").SKU; },
            dateAdded: function (item) { return item.get("sfid"); },
        },
        changeSort: function (sortProperty) {
            this.comparator = this.strategies[sortProperty];
        }
    });
    
    CCRZ.views.includedItemsBodyView = Backbone.View.extend({
        viewName : "incItemsBodyView",
        templateBoth : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.CartIncItemsView.tmpl),
        initialize: function() {
        },
        render : function(sfid, modelData) {
            
            var incItemsBodySelector = CCRZ.uiProperties.CartDetailView.CartIncItemsView.selector + sfid;
            this.setElement($(incItemsBodySelector));
            var v = this;
            v.$el.html(v.templateBoth(modelData));
            CCRZ.pubSub.trigger("view:" + this.viewName + ":refresh", this);
        }
    });
    
    CCRZ.views.attributeItemsBodyView = Backbone.View.extend({
        viewName : "attrItemsBodyView",
        templateBoth : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.CartAttrItemsView.tmpl),
        initialize: function() {
        },
        render : function(sfid, modelData) {
            
            var attrItemsBodySelector = CCRZ.uiProperties.CartDetailView.CartAttrItemsView.selector+ sfid;
            this.setElement($(attrItemsBodySelector));
            var v = this;
            v.$el.html(v.templateBoth(modelData));
            CCRZ.pubSub.trigger("view:" + this.viewName + ":refresh", this);
        }
    });
    
    CCRZ.views.tierPricingView = Backbone.View.extend({
        viewName : "tpView",
        templateBoth : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.ciTP.tmpl),
        initialize: function() {
        },
        render : function(itemID, modelData) {
            this.dataSet = modelData;
            this.setElement($(CCRZ.uiProperties.CartDetailView.ciTP.selector+itemID));
            var v = this;
            v.$el.html(v.templateBoth(this.dataSet));
            CCRZ.pubSub.trigger("view:"+this.viewName+":refresh", this);
        }
    });
    
    CCRZ.cartDetailModel = new CCRZ.models.CartDetail();
    CCRZ.cartDetailView = new CCRZ.views.CartDetailView({
        model : CCRZ.cartDetailModel
    });
    
    CCRZ.currentCart = CCRZ.cartDetailModel;
    _.extend(CCRZ.currentCart, Backbone.Events);
    
    CCRZ.views.removeModal = Backbone.View.extend({
        viewName : "removeModal",
        templateBoth : CCRZ.util.template(CCRZ.uiProperties.CartDetailView.removeModal.tmpl),
        initialize: function() {
        },
        render : function(modelData, callback) {
            this.dataSet = modelData;
            this.setElement($(CCRZ.uiProperties.CartDetailView.removeModal.selector));
            var v = this;
            v.$el.html(v.templateBoth(this.dataSet));
            callback();
            CCRZ.pubSub.trigger("view:"+this.viewName+":refresh", this);
        }
    });
    });
    </script>
    
    <script>
    
    var viewTmp = null;
    var saveSoldToAcc = '';
    
    function onTypeMarkLinkClick(elementId) {
        var sfid = elementId.split('#')[1];
        var maxLength = $('#typeMarkTextarea_' + sfid).attr('maxlength');
        var typeMarkValue = $('#typeMarkTextarea_' + sfid).val();
        var length = typeMarkValue.length;
        $('#charactersLeftSpan_' + sfid).text((maxLength - length));
        
    }
    
    function onTypeMarkKeyUp(elementId) {
        var sfid = elementId.split('_')[1];
        var maxLength = $('#' + elementId).attr('maxlength');
        var typeMarkValue = $('#' + elementId).val();
        var length = typeMarkValue.length;
        $('#charactersLeftSpan_' + sfid).text((maxLength - length));
    }
    
    function fillSoldToSearchTextCommissionWidget() {
        var acctName = $(event.target).text();
        var acctId = $(event.target).attr("data-id");
        $(".soldToSearchTextCommissionWidget").val(acctName);
        $("#selectedSoldToAccountId").val(acctId);
        $(".calcbtn").removeClass('btndimm');
    }
    
    
    function fillSelectedPricingUOM() {
        var itemId = $( "#pricinguoms" ).val();
        var fields = itemId.split('~');
        $("#selectedCartItemId").val(fields[0]);
        $("#selectedCartItemUom").val(fields[2]);
        $("#selectedCartItemQty").val(fields[1]);
    }
    
    function fillChangeQuantity() {
        
    }
    
    
    function confirmCommissionCalcRequestedPrice() {
        var requestedPrice = parseFloat($('#adbTextInput').val().replace(/[A-Za-z$,]/g,''));
        console.log('req price', requestedPrice);
        var catalogno = $("#catalognumberval").text() ;
        var currencyISOCode = CCRZ.cartDetailModel.attributes.currencyISOCode;
        console.log("currencyISOCode",currencyISOCode);
        var rp =  new Intl.NumberFormat('en-US', { style: 'currency', currency: currencyISOCode }).format(requestedPrice.toFixed(2));
        
        // var r = confirm("Are you sure you want apply " + rp + " for " + catalogno + " ?");
        // if (r === false) {
        //     return false;
        // }
        
        $('#messageconfirmation').text("Are you sure you want apply " + rp + " for " + catalogno + " ?");
        // $('#commissionWidgetModal2').modal({
        //     show: false
        // });
        $('#commissionWidgetModal2').modal('hide');
        $('#commissionWidgetModal2confirm').modal({
            backdrop: 'static',
            show: true
        });
    }
    
    function cancelCommissionCalcRequestedPrice() {
        $('#commissionWidgetModal2').modal('show');
    }
    
    function applyCommissionCalcRequestedPrice() {
        console.log('Apply commission request');
        $('#commissionWidgetModal2confirm').modal('hide');
        //$('#commissionWidgetModal2').modal('show');
        CCRZ.pubSub.trigger("applyCommissionCalcPrice", event);
    }
    
    
    
    Backbone.on('view:CartDetailView:created', function(viewPrototype){
        viewPrototype.render = function(){};
    });
    
    CCRZ.pubSub.on("getPricingUOM", function (sku) {
        console.log("getPricingUOM");
        var remoteCall = _.extend(CCRZ.RemoteInvocation, {className: 'PriceAgreementController'});
        remoteCall.invokeCtx('getPricingUOM', sku, function (res, err) {
            if (res != null && res.data != null) {
                var callRespDate = new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
                globalUOMMultiplier = res.data;
                //console.log('pricinguom' , res);
            }
        }, {
            nmsp: false,
            escape: false,
            timeout: 120000
        });
        
        
        
    });
    
    Backbone.on('view:CustomCartDetailView:created', function(viewPrototype){
        CCRZ.pubSub.trigger('getPricingUOM', '10004');
        viewPrototype.events["click .applyPriceAgreement"] = "applyPriceAgreement";
        viewPrototype.events["click .applyCustomPrice"] = "applyCustomPrice";
        viewPrototype.events["click .applyPricing"] = "applyPricing";
        viewPrototype.events["click .applyPricingHeader"] = "applyPricingHeader";
        viewPrototype.events["click .customCheckoutBtn"] = "checkoutPA";
        viewPrototype.events["click .cancelButtononRPA"] = "deletePA";
        viewPrototype.events["click .checkOutBtnNewBehavior"] = "checkoutNew";
        viewPrototype.events["keyup .priceAgreementSearchText"] = "updatePASearchSuggestions";
        viewPrototype.events["click .priceAgreementSearchText"] = "updatePASearchSuggestions";
        viewPrototype.events["keyup .soldToSearchText"] = "updateSoldToSearchSuggestions";
        viewPrototype.events["click .soldToSearchText"] = "updateSoldToSearchSuggestions";
        viewPrototype.events["mousedown .searchOption"] = "fillPASearchText";
        viewPrototype.events["mousedown .soldToSearchOption"] = "fillSoldToSearchText";
        viewPrototype.events["click .showcommissionWidgetModalButton"] = "showcommissionWidgetModal2";
        viewPrototype.events["click .applyPricingAttr"] = "applyPriceAgreementAttr";
        viewPrototype.events["click .applyCustomPriceAttr"] = "applyCustomPriceAttr";
        viewPrototype.events["click .applyCommissionCalcRequestedPrice"] = "applyCommissionCalcRequestedPrice";
        viewPrototype.events["click .saveSoldTo"] = "saveSoldTo";
        viewPrototype.events["change .customMyPriceDisplay"] = "customPriceChange1";
        //viewPrototype.events["click.input-text.customQuantDisplay"] = "customQuantChange";
        
        //            viewPrototype.events['change .uom-select'] = 'handleUOMSelect';
        //            viewPrototype.handleUOMSelect = function (event) {
        //                event.stopPropagation();
        //                event.stopImmediatePropagation();
        //                let selectedUOM = event.currentTarget.value;
        //                console.log('selectedUOM ' + selectedUOM);
        //                let prod = this.model.attributes.ECartItemsS._byId[$(event.target).attr("data-id")].attributes;
        //
        //                let index = prod.product.pricingUOMS.findIndex(e => e.UOM === selectedUOM);
        //                if (index !== -1) {
        //                    prod.piecesPerUnit = prod.product.pricingUOMS[index].multiplier;
        //                    prod.unitOfMeasure = selectedUOM;
        //                }
        //                if (isUserAgent()) {
        //                    loadAdpPricesFromSAP([this]);
        //                } else {
        //                    prod.itemTotal = prod.originalItemPrice * prod.piecesPerUnit * prod.quantity;
        //                    prod.unitOfMeasure = selectedUOM;
        //                   console.log('product ', prod);
        //                    this.render();
        //                }
        //
        //            };
        
        viewPrototype.saveSoldTo = function(event) {
            console.log('SAVING SOLD TO');
            var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            var soldTo = $('.soldToSearchText').val().toLowerCase();
            var soldToId;
            this.model.attributes.soldToAccounts.forEach(function(acct){
                currentTarget = acct.Name.toLowerCase();
                if(currentTarget == soldTo) soldToId = acct.Id;
            });
            remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', soldToId, CCRZ.cartDetailModel.attributes.sfid, (res, err)  => {
                if(res.success){
                CCRZ.cartDetailModel.attributes.soldToAccount = soldToId;
            }else{
                                                 //console.log(res);
                                                 }
                                                 }, {
                                                 nmsp: false, escape: false, timeout: 120000
                                                 });
        }
        
        viewPrototype.customPriceChange1 = function (ev) {
            
            console.log('event inside customPriceChange******',ev);
            var itemId = $(ev.target).attr("data-id");
            console.log('itemId******'+itemId);
            var view = this;
            // console.log('view******'+view);
            var priceString = $(".customMyPriceDisplay[data-id="+itemId+"]").val();
            var quantString = $("#entry_"+itemId).val();
            
            console.log('priceString******'+priceString);
            console.log('quantString******'+quantString);
            
            var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
            console.log('view.model.attributes******',view.model.attributes);
            console.log('view.model.attributes.ECartItemsS.models******',view.model.attributes.ECartItemsS.models);
            console.log('view.model.attributes.ECartItemsS.models.attributes******',view.model.attributes.ECartItemsS.models.attributes);
            
            
            
            view.model.attributes.ECartItemsS.models.forEach(function(oneItem){
                console.log('oneItem******',oneItem);
                if(oneItem.attributes.sfid===itemId){
                    view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount-oneItem.attributes.itemTotal;
                    oneItem.attributes.itemTotal=price*quantString;
                    view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount+oneItem.attributes.itemTotal;
                    oneItem.attributes.price=price;
                    
                }
            });
            /*for(var oneItem in view.model.attributes.ECartItemsS.models){
                         console.log('oneItem******',oneItem);
                     		if(oneItem.attributes.sfid===itemId){
                            view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount-oneItem.attributes.itemTotal;
                            oneItem.attributes.itemTotal=price*quantString;
                            view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount+oneItem.attributes.itemTotal;

                            }
                     }*/
                     //view.model.attributes.ECartItemsS.models[0].attributes.itemTotal=15;
                     console.log('view.render');view.render();
                     /*var sku;
                // console.log('sku******'+sku);
                for(const cartItem in view.model.attributes.ECartItemsS._byId){
                    if(view.model.attributes.ECartItemsS._byId[cartItem].minorLines){
                        view.model.attributes.ECartItemsS._byId[cartItem].minorLines.forEach(function(item){
                            if(item.sfid = itemId) sku = item.product.SKU;
                        });
                    }
                }
                if(!sku){
                    var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
                    console.log('sku*********'+sku);
                }
                     console.log('sku*********'+sku); */
                     //console.log('remoteCall*********'+remoteCall);
                     var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                     console.log('remoteCall*********'+remoteCall);
                     
                     
                     view.saveCart(ev);
                     //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                     remoteCall.invokeContainerLoadingCtx($(), 'applyCustomPrice', itemId, price,
                                                          
                                                          function (res, err) {
                                                              //$("#overlay").remove();//line added
                                                              if (res.success) {
                                                                  /*var cartId = CCRZ.pagevars.currentCartID;
                        view.params.hasChanged = true;
                        view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                 CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                 CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);

                                 console.log('view.render');view.render();
                             });*/
                    } else {
                        CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                        
                    }
                }, {
                    nmsp: false, escape: false
                });
                 }
                 
                 
                 viewPrototype.customQuantChange = function (ev) {
                     
                     console.log('event inside customQuantChange******',ev);
                     var itemId = $(ev.target).attr("data-id");
                     console.log('itemId******'+itemId);
                     var view = this;
                     // console.log('view******'+view);
                     var priceString = $(".customMyPriceDisplay[data-id="+itemId+"]").val();
                     var quantString = $("#entry_"+itemId).val();
                     
                     console.log('priceString******'+priceString);
                     console.log('quantString******'+quantString);
                     
                     var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
                     console.log('view.model.attributes******',view.model.attributes);
                     console.log('view.model.attributes.ECartItemsS.models******',view.model.attributes.ECartItemsS.models);
                     console.log('view.model.attributes.ECartItemsS.models.attributes******',view.model.attributes.ECartItemsS.models.attributes);
                     
                     
                     
                     view.model.attributes.ECartItemsS.models.forEach(function(oneItem){
                         console.log('oneItem******',oneItem);
                         if(oneItem.attributes.sfid===itemId){
                             view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount-oneItem.attributes.itemTotal;
                             oneItem.attributes.itemTotal=price*quantString;
                             view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount+oneItem.attributes.itemTotal;
                             oneItem.attributes.price=price;
                             oneItem.attributes.quantity=quantString;
                         }
                     });
                     //console.log('price******'+price);
                     console.log('view.render');view.render();
                     
                     var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                     //console.log('remoteCall*********'+remoteCall);
                     
                     view.saveCart(ev);
                     //console.log('saveCart*********'+saveCart);
                     
                     remoteCall.invokeContainerLoadingCtx($(), 'applyCustomQuant', itemId, quantString,
                                                          function (res, err) {
                                                              //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                              if (res.success) {
                                                                  //  $("#overlay").remove();//line added
                                                                  /*var cartId = CCRZ.pagevars.currentCartID;
                        //  console.log('cartId*******'+cartId);
                        view.params.hasChanged = true;
                         view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                             //console.log('view.model.priceFetch');
                                 CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                             // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                 CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                             // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);

                                 console.log('view.render');view.render();
                             });*/
                    } else {
                        CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                        // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                        
                    }
                }, {
                    nmsp: false, escape: false
                });
                 }
                 
                 viewPrototype.customQuantInc = function (ev) {
                     
                     console.log('event inside customQuantInc******',ev);
                     var itemId = $(ev.target).attr("data-id");
                     console.log('itemId******'+itemId);
                     var view = this;
                     // console.log('view******'+view);
                     var priceString = $(".customMyPriceDisplay[data-id="+itemId+"]").val();
                     var quantString = $("#entry_"+itemId).val();
                     
                     console.log('priceString******'+priceString);
                     console.log('quantString******'+quantString);
                     
                     var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
                     console.log('view.model.attributes******',view.model.attributes);
                     console.log('view.model.attributes.ECartItemsS.models******',view.model.attributes.ECartItemsS.models);
                     console.log('view.model.attributes.ECartItemsS.models.attributes******',view.model.attributes.ECartItemsS.models.attributes);
                     
                     
                     
                     view.model.attributes.ECartItemsS.models.forEach(function(oneItem){
                         console.log('oneItem******',oneItem);
                         if(oneItem.attributes.sfid===itemId){
                             view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount-oneItem.attributes.itemTotal;
                             oneItem.attributes.itemTotal=price*(++quantString);
                             view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount+oneItem.attributes.itemTotal;
                             oneItem.attributes.price=price;
                             oneItem.attributes.quantity=quantString;
                         }
                     });
                     //console.log('price******'+price);
                     console.log('view.render');view.render();
                     /*var sku;
                // console.log('sku******'+sku);
                for(const cartItem in view.model.attributes.ECartItemsS._byId){
                    if(view.model.attributes.ECartItemsS._byId[cartItem].minorLines){
                        view.model.attributes.ECartItemsS._byId[cartItem].minorLines.forEach(function(item){
                            if(item.sfid = itemId) sku = item.product.SKU;
                        });
                    }
                }
                if(!sku){
                    var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
                    console.log('sku*********'+sku);
                }
                     console.log('sku*********'+sku); */
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    //console.log('remoteCall*********'+remoteCall);
                    console.log('Time A:',Date());
                    view.saveCart(ev);
                    //console.log('saveCart*********'+saveCart);
                    console.log('Time B:',Date());
                    //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                    
                    remoteCall.invokeContainerLoadingCtx($(), 'applyQuantIncr', itemId, price,
                                                         function (res, err) {
                                                             //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                             if (res.success) {
                                                                 /*console.log('Time C:',Date());

                                                                   $("#overlay").remove();//line added
                                                                  var cartId = CCRZ.pagevars.currentCartID;
                                                                  //  console.log('cartId*******'+cartId);
                                                                  view.params.hasChanged = true;
                                                                  console.log('Time D:',Date());
                                                                  view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                                      //console.log('view.model.priceFetch');
                                                                      console.log('Time E:',Date());
                                                                      CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                                      // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                      CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                                      // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                      console.log('Time F:',Date());
                                                                      console.log('view.render');view.render();
                                                                      console.log('Time G:',Date());
                                                                  });
                                                                  console.log('Time H:',Date());*/
                                                              } else {
                                                                  CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                                                                  // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                  
                                                              }
                                                          }, {
                                                              nmsp: false, escape: false
                                                          });
                }
                
                viewPrototype.customQuantDecr = function (ev) {
                    
                    console.log('event inside customQuantDecr******',ev);
                    var itemId = $(ev.target).attr("data-id");
                    console.log('itemId******'+itemId);
                    var view = this;
                    // console.log('view******'+view);
                    var priceString = $(".customMyPriceDisplay[data-id="+itemId+"]").val();
                    var quantString = $("#entry_"+itemId).val();
                    
                    console.log('priceString******'+priceString);
                    console.log('quantString******'+quantString);
                    
                    var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
                    console.log('view.model.attributes******',view.model.attributes);
                    console.log('view.model.attributes.ECartItemsS.models******',view.model.attributes.ECartItemsS.models);
                    console.log('view.model.attributes.ECartItemsS.models.attributes******',view.model.attributes.ECartItemsS.models.attributes);
                    
                    
                    
                    view.model.attributes.ECartItemsS.models.forEach(function(oneItem){
                        console.log('oneItem******',oneItem);
                        if(oneItem.attributes.sfid===itemId){
                            view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount-oneItem.attributes.itemTotal;
                            oneItem.attributes.itemTotal=price*(--quantString);
                            view.model.attributes.subtotalAmount=view.model.attributes.subtotalAmount+oneItem.attributes.itemTotal;
                            oneItem.attributes.price=price;
                            oneItem.attributes.quantity=quantString;
                        }
                    });
                    //console.log('price******'+price);
                    console.log('view.render');view.render();
                    /*var sku;
                // console.log('sku******'+sku);
                for(const cartItem in view.model.attributes.ECartItemsS._byId){
                    if(view.model.attributes.ECartItemsS._byId[cartItem].minorLines){
                        view.model.attributes.ECartItemsS._byId[cartItem].minorLines.forEach(function(item){
                            if(item.sfid = itemId) sku = item.product.SKU;
                        });
                    }
                }
                if(!sku){
                    var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
                    console.log('sku*********'+sku);
                }
                     console.log('sku*********'+sku); */
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    //console.log('remoteCall*********'+remoteCall);
                    console.log('Time A:',Date());
                    view.saveCart(ev);
                    //console.log('saveCart*********'+saveCart);
                    console.log('Time B:',Date());
                    //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                    
                    remoteCall.invokeContainerLoadingCtx($(), 'applyQuantDecr', itemId, price,
                                                         function (res, err) {
                                                             //$("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                             if (res.success) {
                                                                 /*console.log('Time C:',Date());

                                                                  //$("#overlay").remove();//line added
                                                                  var cartId = CCRZ.pagevars.currentCartID;
                                                                  //  console.log('cartId*******'+cartId);
                                                                  view.params.hasChanged = true;
                                                                  console.log('Time D:',Date());
                                                                  view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                                      //console.log('view.model.priceFetch');
                                                                      console.log('Time E:',Date());
                                                                      CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                                      // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                      CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                                      // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                      console.log('Time F:',Date());
                                                                      console.log('view.render');view.render();
                                                                      console.log('Time G:',Date());
                                                                  });
                                                                  console.log('Time H:',Date());*/
                                                              } else {
                                                                  CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                                                                  // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                                  
                                                              }
                                                          }, {
                                                              nmsp: false, escape: false
                                                          });
                }
                
                viewPrototype.showcommissionWidgetModal2 = function(event) {
                    let itemId = $(event.currentTarget).attr("data-id");
                    let fields = itemId.split('~');
                    let contactId = CCRZ.currentUser.ContactId;
                    let modalTemplate = CCRZ.util.template('CommissionWidget-Desktop');
                    let sku = fields[0];
                    let sfid = fields[1];
                    let catalogNo = fields[2];
                    let uom = fields[3];
                    let piecesPerUnit = fields[4];
                    let currencyISOCode = fields[5];
                    let uomLabel = getUomLabelByUomCode(uom);
                    //                let qty = $('#' + sfid + '_qtyEntry').val();
                    //TODO
                    let qty = 1;
                    let isAgent = CCRZ.effSelectorView.dataSet.workingEffAccount.Account_Group__c == 'ZEAG';
                    console.log('initSearch SoldTo -- 1');
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'PriceAgreementController' });
                    remoteCall.invokeCtx('initSearchSoldTo', contactId,
                                         function (soldToAccounts, err) {
                                             
                                             var _self = this;
                                             _self.data = {
                                                 productSKU         : sku,
                                                 sfid               : sfid,
                                                 catalogNo          : catalogNo,
                                                 unitOfMeasureLabel : uomLabel,
                                                 unitOfMeasureCode  : uom,
                                                 qty                : qty,
                                                 piecesPerUnit      : piecesPerUnit,
                                                 isAgent            : isAgent,
                                                 isCartPage         : true
                                             };
                                             $('#commissionWidgetModalParent2').html(modalTemplate(_self.data));
                                             $('#commissionWidgetModal2').modal({
                                                 backdrop: 'static',
                                                 show: true
                                             }); //show modal
                                             
                                             $("#range_price").attr({
                                                 "min": 0,
                                                 "max": 100
                                             });
                                             $("#range_price_disp").text(0);
                                             // Don't fill Sold To field for Agent accounts
                                             if (!isAgent) {
                                                 $(".soldToSearchTextCommissionWidget").val(CCRZ.effSelectorView.dataSet.workingEffAccount.Name);
                                             }
                                             getPriceAndCommission('getprice','',sku, uom, qty, currencyISOCode);
                                             
                                         }, {
                                             nmsp: false, escape: false
                                         });
                }
                
                viewPrototype.applyPricing = function (ev) {
                    var itemId = $(ev.currentTarget).attr("data-id");
                    var priceAgreementNo = $(".priceAgreementSearchText[data-id="+itemId+"]").val();
                    if(priceAgreementNo){
                        this.applyPriceAgreement(ev);
                    }
                    else{
                        this.applyCustomPrice(ev);
                    }
                }
                
                viewPrototype.applyPricingHeader = function (ev) {
                    console.log('Inside applyPricingHeader');
                    if($('.priceAgreementSearchText').val().length==0){
                        
                        CCRZ.pubSub.trigger("pageMessage", CCRZ.createPageMessage('ERROR', 'messagingSection-Error', 'Please enter a Price Agreement'));
                        return;
                    }
                    if(isAgent && $('.soldToSearchText').val().length==0){
                        
                        CCRZ.pubSub.trigger("pageMessage", CCRZ.createPageMessage('ERROR', 'messagingSection-Error', 'Please enter Sold To Account'));
                        return;
                    }
                    
                    var view = this;
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    
                    var soldTo = $('.soldToSearchText').val().toLowerCase();
                    var soldToId;
                    view.model.attributes.soldToAccounts.forEach(function(acct){
                        currentTarget = acct.Name.toLowerCase();
                        if(currentTarget == soldTo) soldToId = acct.Id;
                    });
                    //console.log("Apply Pric Header Sold To : ", soldToId);
                    //console.log(soldToId, CCRZ.cartDetailModel.attributes.soldToAccount);
                    if(soldToId != CCRZ.cartDetailModel.attributes.soldToAccount){
                        //console.log('changing sold to...');
                        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                        remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', soldToId, CCRZ.cartDetailModel.attributes.sfid, (res, err)  => {
                            if (res.success) {
                            CCRZ.cartDetailModel.attributes.soldToAccount = soldToId;
                        }
                                                             else{
                                                             }
                                                             }, {
                                                             nmsp: false, escape: false, timeout: 120000
                                                             });
                        
                    }
                    
                    var itemId = $(ev.currentTarget).attr("data-id");
                    var priceAgreementNo = $(".priceAgreementSearchText[data-id="+itemId+"]").val();
                    //console.log('TestapplyPricingHeader');
                    //console.log(priceAgreementNo);
                    //console.log(isSample);
                    $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyHeaderPriceAgreement', isSample,priceAgreementNo,
                                                         
                                                         function (res, err) {
                                                             $("#overlay").remove();//line added
                                                             if (res.success) {
                                                                 console.log('No Changes in Cart for Header Price Agreement call');
                                                             } else {
                                                                 
                                                                 console.log('Going to refresh Cart for Header Price agrrement changes');
                                                                 var cartId = CCRZ.pagevars.currentCartID;
                                                                 view.params.hasChanged = true;
                                                                 
                                                                 view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                                     console.log('TDBG');
                                                                     CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                                     CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                                     console.log('view.render');view.render();
                                                                     
                                                                 });
                                                             }
                                                         }, {
                                                             nmsp: false, escape: false
                                                         });
                }
                
                viewPrototype.checkoutNew = function (ev) {
                    $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added for custom loader
                    var view = this;
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeOrderType', 'Purchase Order',
                                                         function (res, err) {
                                                             $("#overlay").remove();//line added
                                                             
                                                             if (res.success) {
                                                                 view.goToCheckoutNewBehavior(ev);
                                                             } else {
                                                                 //console.log('failed');
                                                             }
                                                         }, {
                                                             nmsp: false, escape: false
                                                         });
                }
                
                // cancel button on Revise price agreement by Sagar 10/13/2021
                
                viewPrototype.deletePA = function (ev) {
                    var cartid1=CCRZ.cartDetailModel.attributes.sfid;
                    console.log('cartid1',cartid1);
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, {className: 'CartDetailActions'});
                    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'deleteRevisePrice', CCRZ.cartDetailModel.attributes.sfid,
                                                         function (res, err) {
                                                             //$("#overlay").remove();//line added
                                                             if (res.success) {
                                                                 if (window.location.href.indexOf("stage") > -1) {
                                                                     console.log('your url contains the name stage');
                                                                     window.open('/Agents/s/', '_self');
                                                                 }
                                                                 else {
                                                                     console.log('your url contains the name myconnect (Prod)');
                                                                     window.open('/s/', '_self');
                                                                 }
                                                             } else {
                                                             }
                                                         }, {
                                                             nmsp: false, escape: false
                                                         });
                }
                
                
                viewPrototype.checkoutPA = function (ev) {
                    var view = this;
                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                    var orderType = $(ev.currentTarget).attr("name");
                    // Check Duplicate Product Entry By Sameer Mahadik On(7-3-2021)
                    var currentCartItems = CCRZ.cartDetailModel.attributes.ECartItemsS;
                    var productSkus = [];
                    var duplicateProducts = [];
                    currentCartItems.models.forEach(elem => {
                        
                        var productSKU = elem.attributes.extName !== undefined ? elem.attributes.extName : elem.attributes.product.SKU;
                        if (!productSkus.includes(productSKU)) {
                        productSkus.push(productSKU);
                    } else {
                                                    var duplicateEntry = elem.attributes.extName == undefined ? elem.attributes.product.sfdcName : elem.attributes.extName;
                                                    if (!duplicateProducts.includes(duplicateEntry)) {
                        duplicateProducts.push(duplicateEntry);
                    }
                }
        });
    
    $(".messagingSection-Error").hide();
    if (duplicateProducts.length > 0) {
        var errorMsg = "Duplicate Product Added To Cart <b>" + duplicateProducts.toString().replace(/,/g, ", ") + "</b>";
        $(".messagingSection-Error").html('<div class="alert alert-danger">' + errorMsg + '<div>').show();
        $(window).scrollTop({ top: 0, left: 0,  behavior: 'smooth' });
        return false;
    }
    
    $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added for custom loader
    
    remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeOrderTypeNew', orderType, CCRZ.cartDetailModel.attributes.sfid,
                                         function (res, err) {
                                             $("#overlay").remove();//line added
                                             
                                             if (res.success) {
                                                 view.goToCheckoutNewBehavior(ev);
                                             } else {
                                             }
                                         }, {
                                             nmsp: false, escape: false
                                         });
    }
    
    viewPrototype.fillPASearchText = function (ev) {
        
        var itemId = $(ev.currentTarget).attr("data-id");
        var agreementNo = $(ev.currentTarget).text();
        $(".priceAgreementSearchText[data-id="+itemId+"]").val(agreementNo);
    }
    
    viewPrototype.fillSoldToSearchText = function (ev) {
        var view = this;
        var acctName = $(ev.currentTarget).text();
        var sfid = $(ev.currentTarget).attr('data-id');
        $(".soldToSearchText").val(acctName);
        if(isAgent) {
            $(".priceAgreementSearchText").val('');
            // console.log("Current Sold After filling:" ,acctName);
            //console.log("Current Sold After filling element:" ,$(ev.currentTarget));
            //console.log("isAgent:" ,isAgent);
            var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            /* $("header").before('<div id="overlay" class="modal-backdrop fade in"></div>');*/
            // $("header").before("<div id='overlay' class ='modal-backdrop fade in'><div class='customLoader'></div></div>");
            /*  $("header").before("<div id='overlay' class ='modal-backdrop fade in'><div class='spinnerBg'></div></div>");*/
            
            // Save Sold To Account Name BY Sameer(5-19-2021)
            var soldToName = acctName.toLowerCase();
            var soldToId = '';
            var minOrderAmt = "$1,000";
            var minOrderMessage = 'Please note that this order may be subject to a minimum order fee if the order is less than ';
            
            $(".requestPAButton").attr("disabled", false);
            $(".requestPAButton").show();
            view.model.attributes.soldToAccounts.forEach(function(soldToAcct){
                var currentTarget = soldToAcct.Name + " - " + soldToAcct.GE_LGT_EM_SAP_Customer_Number__c;
                currentTarget = currentTarget.toLowerCase();
                // console.log("Current Target  : ", currentTarget);
                if (currentTarget.includes(soldToName)) {
                    soldToId = soldToAcct.Id;
                    // Hide Request Price Agreement Button For Sample Account By Sameer Mahadik On(7-9-2021)
                    if (soldToAcct.GE_LGT_EM_Order_Block__c !== undefined && soldToAcct.GE_LGT_EM_Order_Block__c == 'Z1') {
                        $(".requestPAButton").hide();
                        isSample=true;
                    }
                    
                    // Show minimum order message as per sold to segmentation By Sameer Mahadik on (10-6-2021)
                    if (soldToAcct.Customer_Segmentation__c == "FD") {
                        minOrderAmt = "$2,500";
                    }
                    
                    $(".min-order-message").html('<span><i class="fa fa-info-circle"></i> ' + minOrderMessage + minOrderAmt + '</span>').css("display", "block");
                    
                    return;
                }
            });
            //console.log("Attributes In Sold To : ", this.model.attributes);
            //console.log("Sold To Id For Save : ", soldToId);
            var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', soldToId, CCRZ.cartDetailModel.attributes.sfid, (res, err)  => {
                // console.log("changeSoldTo Response : ", res);
                if (res.success) {
                CCRZ.cartDetailModel.attributes.soldToAccount = soldToId;
                saveSoldToAcc = soldToId;
            }
                                                 else{
                                                 }
                                                 }, {
                                                 nmsp: false, escape: false, timeout: 120000
                                                 });
            console.log('initSearch PriceAgreement -- 1 2');
            var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            remoteCall.invokeCtx('initSearchPriceAgreement', isAgent, acctName,
                                 function (priceAgreements, err) {
                                    view.model.attributes.priceAgreements = priceAgreements;
                                    $("#overlay").remove();
                                 }, {
                                     nmsp: false, escape: false, buffer: false
                                 });
        }
        
        // remove attribute disabled after select sold to field(3/24/2021) By: Sameer Mahadik
        $(".priceAgreementSearchText").removeAttr("disabled");
        // Enable Request Order Button By Sameer Mahadik On(7-22-2021)
        $(".checkOutBtnNewBehavior").attr("disabled", false);
        $(".requestPAButton").attr("disabled", false);
    }
    
    
    viewPrototype.applyCustomPriceAttr = function (ev) {
        
        var itemId = $(ev.currentTarget).attr("data-id");
        var view = this;
        var priceString = $(".customPriceDisplayNew[data-id="+itemId+"]").val();
        var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
        
        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
        
        var qty = $('#entry_'+itemId).val();
        
        remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyCustomPriceAttr', itemId, price, qty,
                                             function (res, err) {
                                                 
                                                 if (res.success) {
                                                     var cartId = CCRZ.pagevars.currentCartID;
                                                     view.params.hasChanged = true;
                                                     view.saveCart(ev);
                                                     view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                         console.log('TDBG');
                                                         CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                         CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                         console.log('view.render');view.render();
                                                     });
                                                 } else {
                                                     CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                                                 }
                                             }, {
                                                 nmsp: false, escape: false
                                             });
    }
    
    //console.log('priceString********'+priceString);
    // console.log('price******'+price);
    
    viewPrototype.applyCustomPrice = function (ev) {
        
        
        var itemId = $(ev.currentTarget).attr("data-id");
        //console.log('itemId******'+itemId);
        var view = this;
        // console.log('view******'+view);
        var priceString = $(".customPriceDisplay[data-id="+itemId+"]").val();
        console.log('priceString******'+priceString);
        var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
        //console.log('price******'+price);
        
        var sku;
        // console.log('sku******'+sku);
        for(const cartItem in view.model.attributes.ECartItemsS._byId){
            if(view.model.attributes.ECartItemsS._byId[cartItem].minorLines){
                view.model.attributes.ECartItemsS._byId[cartItem].minorLines.forEach(function(item){
                    if(item.sfid = itemId) sku = item.product.SKU;
                });
            }
        }
        if(!sku){
            var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
            //console.log('sku*********'+sku);
        }
        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
        //console.log('remoteCall*********'+remoteCall);
        
        
        view.saveCart(ev);
        //console.log('saveCart*********'+saveCart);
        $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
        remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyCustomPrice', itemId, price,
                                             
                                             function (res, err) {
                                                 $("#overlay").remove();//line added
                                                 if (res.success) {
                                                     // $("#overlay").remove();//line added
                                                     var cartId = CCRZ.pagevars.currentCartID;
                                                     //  console.log('cartId*******'+cartId);
                                                     view.params.hasChanged = true;
                                                     view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                         //console.log('view.model.priceFetch');
                                                         console.log('TDBG');
                                                         CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                         // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                         CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                         // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                         
                                                         console.log('view.render');view.render();
                                                     });
                                                 } else {
                                                     CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                                                     // console.log('CCRZ.pubSub.trigger'+CCRZ.pubSub.trigger);
                                                     
                                                 }
                                             }, {
                                                 nmsp: false, escape: false
                                             });
    }
    
    
    viewPrototype.updatePASearchSuggestions = function (ev) {
        var view = this;
        var itemId = $(ev.currentTarget).attr("data-id");
        var searchString = $(".priceAgreementSearchText[data-id="+itemId+"]").val();
        
        var currentTarget;
        var matches = [];
        console.log("Price Agreements : ", this.model.attributes.priceAgreements);
        this.model.attributes.priceAgreements.forEach(function(agreement){
            currentTarget = agreement.Agreement_No__c;
            if(currentTarget.includes(searchString)){
                matches.push(currentTarget);
            }
        });
        
        $(".searchResults[data-id="+itemId+"]").empty();
        
        matches.forEach(function(match){
            $(".searchResults[data-id="+itemId+"]").append("<li><a href='#' class='searchOption' data-id='"+itemId+"'>"+match+"</a></li>");
        });
    }
    
    viewPrototype.updateSoldToSearchSuggestions = function (ev) {
        //console.log("event:" ,$(ev.currentTarget).attr("data-id"));
        var view = this;
        var searchString = $(".soldToSearchText").val().toLowerCase();
        //console.log("Current Sold to Is from updateSoldToSearchSuggestions:" ,view.model.attributes.soldToAccount);
        var currentTarget;
        var targetLowerCase;
        var matches = [];
        var matchIds = []
        console.log("soldToAccounts: ", this.model.attributes);
        this.model.attributes.soldToAccounts.forEach(function(acct){
            //currentTarget = acct.Name;
            // Get Suggestion List By Save Sold To Account By Sameer(5-19-2021)
            currentTarget = acct.Name + " - " + acct.GE_LGT_EM_SAP_Customer_Number__c;
            targetLowerCase = currentTarget.toLowerCase();
            if(targetLowerCase.includes(searchString)){
                matches.push(currentTarget);
                matchIds.push(acct.Id);
            }
        });
        
        $(".soldToSearchResults").empty();
        
        for (let i = 0; i < matches.length; i++) {
            $(".soldToSearchResults").append("<li><a href='#' class='soldToSearchOption' data-id=" + matchIds[i] + ">"+matches[i]+"</a></li>");
        }
        
        //                matches.forEach(function(match){
        //                    console.log('match', match)
        //                    $(".soldToSearchResults").append("<li><a href='#' class='soldToSearchOption'>"+match+"</a></li>");
        //                });
        
        //add disbaled to price agreement field if sold to field is empty(3/24/2021) By: Sameer Mahadik
        if(searchString == '') {
            $(".priceAgreementSearchText").val('');
            $(".priceAgreementSearchText").attr("disabled", true);
            // Disabled Request Order Button IF Sold To field Is Empty By Sameer Mahadik On(7-22-2021)
            $(".checkOutBtnNewBehavior").attr("disabled", true);
            //                    $(".requestPAButton").show();
            $(".requestPAButton").attr("disabled", true);
            // Remove minimum order message if sold to fieldis clear By Sameer Mahadik On(10-6-2021)
            $(".min-order-message").hide();
        }
    }
    
    viewPrototype.applyPriceAgreement = function (ev) {
        
        var itemId = $(ev.currentTarget).attr("data-id");
        var view = this;
        var priceAgreementNo = $(".priceAgreementSearchText[data-id="+itemId+"]").val();
        var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
        //CON-246 changes by Ravi Singh for material desc
        var desc;
        if(sku=="requestedSku"){
            desc=view.model.attributes.ECartItemsS._byId[itemId].attributes.extName;
        }
        else{
            desc=view.model.attributes.ECartItemsS._byId[itemId].attributes.product.materialDescription;
        }
        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
        console.log('Test');
        console.log("priceAgreementNo ",priceAgreementNo);
        console.log("Material desc ",desc);
        console.log('Time A:',Date());
        view.saveCart(ev);
        remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyPriceAgreement', priceAgreementNo, itemId, desc,
                                             function (res, err) {
                                                 // $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                 if (res.success) {
                                                     //  $("#overlay").remove();//line added
                                                     console.log('Time B:',Date());
                                                     var cartId = CCRZ.pagevars.currentCartID;
                                                     view.params.hasChanged = true;
                                                     view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                         console.log('Time C:',Date());
                                                         console.log('TDBG');
                                                         CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                         CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                         console.log('view.render');view.render();
                                                         console.log('Time D:',Date());
                                                     });
                                                 } else {
                                                     CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'InvalidPriceAgreement'));
                                                 }
                                             }, {
                                                 nmsp: false, escape: false
                                             });
    }
    
    viewPrototype.applyPriceAgreementAttr = function (ev) {
        
        var itemId = $(ev.currentTarget).attr("data-id");
        var view = this;
        var priceAgreementNo = $(".priceAgreementSearchText[data-id="+itemId+"]").val();
        var sku = view.model.attributes.ECartItemsS._byId[itemId].attributes.product.SKU;
        //if(view.model.attributes.ECartItemsS._byId[itemId].minorLines)
        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
        view.saveCart(ev);
        console.log('Test');
        console.log(priceAgreementNo);
        remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyPriceAgreementAttr', priceAgreementNo, itemId, sku,
                                             function (res, err) {
                                                 // $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                 
                                                 if (res.success) {
                                                     // $("#overlay").remove();//line added
                                                     var cartId = CCRZ.pagevars.currentCartID;
                                                     view.params.hasChanged = true;
                                                     view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                         console.log('TDBG');
                                                         CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                         CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                         console.log('view.render');view.render();
                                                     });
                                                 } else {
                                                     CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'InvalidPriceAgreement'));
                                                 }
                                             }, {
                                                 nmsp: false, escape: false
                                             });
    }
    
    viewPrototype.initSearchSoldTo = function (contactId) {
        var view = this;
        if(view.model.attributes.hasOwnProperty('soldToAccounts')) return;
        var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
        console.log('initSearch SoldTo -- 2 3');
        remoteCall.invokeCtx('initSearchSoldTo', contactId,
                             function (soldToAccounts, err) {
                                 console.log(err);
                                 if(soldToAccounts.length>0){
                                     view.model.attributes.soldToAccounts = soldToAccounts;
                                     $(".soldToSearchResults").empty();
                                     view.model.attributes.soldToAccounts.forEach(function(acct){
                                         // acct.Name+=' - '+acct.GE_LGT_EM_SAP_Customer_Number__c;
                                         // $(".soldToSearchResults").append("<li><a href='#' class='soldToSearchOption'>"+acct.Name+"</a></li>");
                                         // Set Sold To Account Suggestion List by Customer Name with Customer No. By Sameer(5-19-2021)
                                         var soldToName = acct.Name + " - " + acct.GE_LGT_EM_SAP_Customer_Number__c;
                                         $(".soldToSearchResults").append("<li><a href='#' class='soldToSearchOption'>" + soldToName + "</a></li>");
                                     });
                                     const urlParams = new URLSearchParams(window.location.search);
                                     const reOrder = urlParams.get('reOrder');
                                     const soldTo = urlParams.get('soldTo');
                                     if(soldTo!=undefined && reOrder=="true"){
                                         CCRZ.cartDetailModel.attributes.soldToAccount=soldTo;
                                     }else if(reOrder==undefined) {
                                         CCRZ.cartDetailModel.attributes.soldToAccount=CCRZ.pagevars.effAccountId;
                                     }
                                     if(CCRZ.cartDetailModel.attributes.soldToAccount != undefined){
                                         let curSoldTo = CCRZ.cartDetailModel.attributes.soldToAccount;
                                         view.model.attributes.soldToAccounts.forEach(function(acct){
                                             currentTarget = acct.Id;
                                             // Block Sold To Filed For Reorder By Sameer Mahadik On(7-23-2021)
                                             if(currentTarget == curSoldTo) {
                                                 $('.soldToSearchText').val(acct.Name + " - " + acct.GE_LGT_EM_SAP_Customer_Number__c);
                                                 $(".soldToSearchText").attr("disabled", true);
                                                 $(".priceAgreementSearchText").attr("disabled", false);
                                                 $(".checkOutBtnNewBehavior").attr("disabled", false);
                                                 $(".requestPAButton").attr("disabled", false);
                                                 $(".soldToInfo").hide();
                                             }
                                         });
                                         if(reOrder=="true"){
                                             var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                             remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', curSoldTo, CCRZ.cartDetailModel.attributes.sfid, (res, err)  => {
                                                 if(res.success){
                                                 CCRZ.cartDetailModel.attributes.soldToAccount = curSoldTo;
                                             }else{
                                                                                  //console.log(res);
                                                                                  }
                                                                                  }, {
                                                                                  nmsp: false, escape: false, timeout: 120000
                                                                                  });
                                         }
                                     }
                                     else{
                                         setTimeout(() => {
                                             console.log('triggered');
                                             let curSoldTo = CCRZ.cartDetailModel.attributes.soldToAccount;
                                             view.model.attributes.soldToAccounts.forEach(function(acct){
                                             currentTarget = acct.Id;
                                             if(currentTarget == curSoldTo) $('.soldToSearchText').val(acct.Name + " - " + acct.GE_LGT_EM_SAP_Customer_Number__c);
                                         });
                                         }, 3000);
                                             
                                         }
                                         }
                                             
                                         }, {
                                             nmsp: false, escape: false
                                         });
                                     }
                                     
                                     
                                     CCRZ.pubSub.on('applyCommissionCalcPrice',function(event){
                                         viewTmp.applyCommissionCalcRequestedPrice(event);
                                     });
                                     
                                     viewPrototype.applyCommissionCalcRequestedPrice = function(ev) {
                                         
                                         var requestedPrice = parseFloat($("#adbTextInput").val().replace(/[A-Za-z$,]/g,''));
                                         var remoteCall = _.extend(CCRZ.RemoteInvocation, {
                                             className: 'CartDetailActions'
                                         });
                                         
                                         var sku = $("#skunumberval").text();
                                         var view  = viewTmp;
                                         
                                         var id = $('#selectedCartItemId').text();
                                         var qty = parseInt($('#selectedCartItemQty').val());
                                         
                                         remoteCall.invokeCtx('applyCustomPriceAttr', id, requestedPrice,  qty,  function(res, err) {
                                             if (res != null && res.data != null) {
                                                 var callRespDate = new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
                                                 if (res.success) {
                                                     var cartId = CCRZ.pagevars.currentCartID;
                                                     view.params.hasChanged = true;
                                                     view.saveCart(ev);
                                                     view.model.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                         console.log('TDBG');
                                                         CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                         CCRZ.pubSub.trigger("action:"+view.viewName+":cartItemsRefreshed", view);
                                                         console.log('view.render');view.render();
                                                     });
                                                 } else {
                                                     CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'applyCommissionCalcRequestedPrice'+sku, 'Could not apply pricing'));
                                                 }
                                             }
                                         }, {
                                             nmsp: false,
                                             escape: false,
                                             timeout: 120000
                                         });
                                         
                                     }
                                 });
                                 
                                 
                                 
                                 Backbone.on('view:attrItemsBodyView:created', function(viewPrototype){
                                     viewPrototype.events = [];
                                     // viewPrototype.events["click .applyCustomPriceAttr"] = "applyCustomPrice";
                                     
                                     viewPrototype.render = function(sfid, modelData) {
                                         
                                         this.cartModel = modelData;
                                         var attrItemsBodySelector = CCRZ.uiProperties.CartDetailView.CartAttrItemsView.selector+ sfid;
                                         this.setElement($(attrItemsBodySelector));
                                         var v = this;
                                         v.$el.html(v.templateBoth(modelData));
                                         CCRZ.pubSub.trigger("view:" + this.viewName + ":refresh", this);
                                     }
                                     viewPrototype.applyCustomPrice = function (ev) {
                                         
                                         
                                         var itemId = $(ev.currentTarget).attr("data-id");
                                         var view = this;
                                         var priceString = $(".customPriceDisplay[data-id="+itemId+"]").val();
                                         var price = parseFloat(priceString.replace(/[^\d\.]/g, ''));
                                         var sku = view.cartModel.attributes.product.SKU;
                                         var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                         
                                         //view.saveCart(ev);
                                         remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'applyCustomPrice', itemId, price,
                                                                              function (res, err) {
                                                                                  // $("header").before("<div id='overlay' class ='deskLayout'><div class='customLoader'></div></div>");//line added
                                                                                  if (res.success) {
                                                                                      //  $("#overlay").remove();//line added
                                                                                      var cartId = CCRZ.pagevars.currentCartID;
                                                                                      //view.params.hasChanged = true;
                                                                                      view.cartModel.priceFetch(view.params.skipAutoCalc, function (response, event){
                                                                                          console.log('TDBG');
                                                                                          CCRZ.pubSub.trigger('cartChange', CCRZ.pagevars.currentCartID);
                                                                                          CCRZ.pubSub.trigger("action:"+'CustomCartDetailView'+":cartItemsRefreshed", view);
                                                                                          //console.log('view.render');view.render();
                                                                                      });
                                                                                  } else {
                                                                                      CCRZ.pubSub.trigger('pageMessage', CCRZ.createPageMessage('ERROR', 'priceAgreementError'+itemId, 'Could not apply pricing'));
                                                                                  }
                                                                              }, {
                                                                                  nmsp: false, escape: false
                                                                              });
                                     }
                                 });
                                 
                                 
                                 
                                 
                                 
                                 
                                 CCRZ.pubSub.on('view:attrItemsBodyView:refresh',function(view){
                                     if(isAgent){
                                         $('.customPriceDisplayNew').removeAttr('readonly');
                                     }
                                     else $('.applyCustomPrice').css('display','none');
                                 });
                                 
                                 
                                 
                                 
                                 CCRZ.pubSub.on('view:CustomCartDetailView:refresh',function(view){
                                     // Show Tool Tip For Sold To Account By Sameer Mahadik On(7-20-2021)
                                     $('[data-toggle="tooltip"]').tooltip();
                                     CCRZ.pubSub.trigger('geteffctiveSoldTo', '10004');
                                     
                                    viewTmp =  view;
                                    console.log('Time I:',Date());
                                    var accountId = CCRZ.pagevars.effAccountId;
                                    var repCode = (CCRZ.currentUser ? CCRZ.currentUser.repCode : '');
                                    var contactId = (CCRZ.currentUser ? CCRZ.currentUser.ContactId : '');
 
                                     view.params.revisePA = (new URLSearchParams(window.location.search)).get('revisePA');
                                     //if(view.params.revisePA != null){
                                     // Get Sold To Value
                                     
                                     
                                     // view.model.attributes.soldToAccounts.forEach(function(m){
                                     //  console.log("Test iterator ", m.Name );
                                     //if(measureId == m.Id){
                                     //  measure = m.Name;
                                     // }
                                     //  });
                                     
                                     
                                     //console.log("Hii", view.model.attributes);
                                     //console.log("Sold To : ", view.model.attributes.soldToAccount);
                                     
                                     // Fetch distributor name & customer no. to display on soldTo field By Sameer Mahadik On(12-7-2021)
                                     // var lssIndexLocalStorage = localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}');
                                     // lssIndexLocalStorage = lssIndexLocalStorage !== null ? JSON.parse(lssIndexLocalStorage) : null;
                                     // console.log("Lss Index: ", lssIndexLocalStorage);
                                     // if (lssIndexLocalStorage !== null &&
                                     //     lssIndexLocalStorage['DistributorAccount'] !== undefined &&
                                     //     lssIndexLocalStorage['DistributorAccount'] !== null) {
                                     
                                     //     console.log("Distributor Account Number: ", lssIndexLocalStorage['DistributorAccount']);
                                     // }
                                     
                                     var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                     console.log('Time Before :',Date());
                                     
                                     remoteCall.invokeCtx('initSoldToByEffID',
                                                          function (soldtoAccounteff, err) {
                                                              if(soldtoAccounteff !== null){
                                                                  $("#SoldToAccount").val(soldtoAccounteff.Name + ' - ' + soldtoAccounteff.GE_LGT_EM_SAP_Customer_Number__c);
                                                                  $("#SoldToAccount").attr('disabled', true);
                                                                  $(".priceAgreementSearchText").removeAttr("disabled");
                                                                  // Enable Request Order Button & Hide Info Icon Of Sold To Field By Sameer Mahadik On(7-22-2021)
                                                                  $(".checkOutBtnNewBehavior").attr("disabled", false);
                                                                  $(".requestPAButton").attr("disabled", false);
                                                                  $(".soldToInfo").hide();
                                                                  console.log('Time After:',Date());
                                                                  
                                                                  // Hide Price Agreement Button For Sample Account By Sameer Mahadik On(7-9-2021)
                                                                  if (soldtoAccounteff.GE_LGT_EM_Order_Block__c !== undefined && soldtoAccounteff.GE_LGT_EM_Order_Block__c == 'Z1') {
                                                                      $(".requestPAButton").hide();
                                                                      isSample=true;
                                                                  }
                                                                  
                                                                  // Show minimum order message As Per Sold To Segmentation By Sameer Mahadik On(10-6-2021)
                                                                  var minOrderAmt = "$1,000";
                                                                  var minOrderMessage = 'Please note that this order may be subject to a minimum order fee if the order is less than ';
                                                                  
                                                                  if (soldtoAccounteff.Customer_Segmentation__c == "FD") {
                                                                      minOrderAmt = "$2,500";
                                                                  }
                                                                  
                                                                  $(".min-order-message").html('<span><i class="fa fa-info-circle"></i> ' + minOrderMessage + minOrderAmt + '</span>').css("display", "block");
                                                                  
                                                                  // Get Price Agreement Record By Saved Sold To Account BY Sameer Mahadik On (5-20-2021)
                                                                  if (isAgent) {
                                                                    console.log('initSearch PriceAgreement -- 3');
                                                                    var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                                                    remoteCall.invokeCtx('initSearchPriceAgreement', isAgent, soldtoAccounteff.GE_LGT_EM_SAP_Customer_Number__c,
                                                                    function (priceAgreements, err) {
                                                                        view.model.attributes.priceAgreements = priceAgreements;
                                                                        console.log('view.model.attributes.priceAgreements: 1(3) - ' );
                                                                        console.log(view.model.attributes.priceAgreements);
                                                                    }, {
                                                                        nmsp: false, escape: false, buffer: false
                                                                    });
                                                                  }
                                                              }
                                                          }, {
                                                              nmsp: false, escape: false , buffer: false
                                                          });
                                                          
                                        console.log('view.model.attributes.priceAgreements: 3 - ',view.model.attributes.priceAgreements);                     
                                        // Set remote call for "updateCartAccount" to update account in CC Cart By Sameer Mahadik On(3-8-2022)
                                        if (localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}') !== null) {
                                            var userData = localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}');
                                            userData = JSON.parse(userData);
                                            var userType = localStorage.getItem(userData['User Type']);
                                            var id = "";
                                            if (userType == "Agent") {
                                                id = localStorage.getItem(userData['AgentID']);
                                            } else {
                                                id = localStorage.getItem(userData['DistributorID']);
                                            } 

                                            console.log("updateCartAccount RemoteCall is Start In CustomCartDetailView:Refresh  At " + new Date() + " For " + userType + " Which ID Is "+ id);
                                            remoteCall.invokeCtx('updateCartAccount', id,
                                            function (res, err) {
                                                console.log("updateCartAccount RemoteCall Is Executed In CustomCartDetailView:Refresh At " + new Date() + " For " + userType + " Which ID Is "+ id);
                                            }, {
                                                nmsp: false, escape: false
                                            });
                                        }
                                                          
                                     console.log('initSearch SoldTo -- 4: ');
                                     var currentUrlParams = new URLSearchParams(window.location.search);
                                     console.log("Sold To 4 urlParams: ", currentUrlParams.get("reOrder"));
                                     if (currentUrlParams.get("reOrder") !== null && currentUrlParams.get("reOrder")) {
                                         var reorderSoldTo = currentUrlParams.get("soldTo");
                                         console.log("reorderSoldTo: ", reorderSoldTo);
                                         remoteCall.invokeContainerLoadingCtx($('.deskLayout'), 'changeSoldTo', reorderSoldTo, view.model.attributes.sfid, (res, err)  => {
                                            if(res.success){
                                                view.model.attributes.soldToAccount = reorderSoldTo;
                                            }
                                         },
                                         {
                                            nmsp: false, escape: false, timeout: 120000
                                         });
                                     }
                                     remoteCall.invokeCtx('initSearchSoldTo', contactId,
                                                          function (soldToAccounts, err) {
                                                              var finalSoldTo = soldToAccounts;
                                                              var a = view.model.attributes.soldToAccount;
                                                              console.log("Test4 A: ", a);
                                                              const urlParams = new URLSearchParams(window.location.search);
                                                              if (a === undefined && window.location.href.indexOf("reOrder=true") != -1) {
                                                                  a = urlParams.get('soldTo');
                                                              }
                                                              view.model.attributes.soldToAccounts = finalSoldTo;
                                                              console.log("finalSoldTo: ", finalSoldTo);
                                                              if (a !== undefined) {
                                                                  saveSoldToAcc = a;
                                                              }

                                                              console.log("saveSoldToAcc: ", saveSoldToAcc);
                                                              console.log("SfId: ", view.model.attributes.sfid);
                                                              
                                                              view.model.attributes.soldToAccounts.forEach(function(m){
                                                                  if (saveSoldToAcc == m.Id) {
                                                                      accname = m.Name + " - " + m.GE_LGT_EM_SAP_Customer_Number__c;
                                                                      $("#SoldToAccount").val(accname);
                                                                      //remove disabled attribute of proce agreement(3/24/2021) By: Sameer Mahadik
                                                                      $(".priceAgreementSearchText").removeAttr("disabled");
                                                                      // Enable Request Order Button By Sameer Mahadik On(7-22-2021)
                                                                      $(".checkOutBtnNewBehavior").attr("disabled", false);
                                                                      $(".requestPAButton").attr("disabled", false);
                                                                      
                                                                      // Hide Price Agreement Button For Sample Account By Sameer Mahadik On(7-9-2021)
                                                                      if (m.GE_LGT_EM_Order_Block__c !== undefined && m.GE_LGT_EM_Order_Block__c == 'Z1') {
                                                                          $(".requestPAButton").hide();
                                                                        isSample=true;
                                                                      }
                                                                      
                                                                      // Disabled & Hide Sold To Acc Info Icon & Sold To Field For Revise & Convert To Order By Sameer Mahadik On(7-23-2021)
                                                                      if (window.location.href.indexOf("revisePA") > -1) {
                                                                          $(".soldToSearchText").attr("disabled", true);
                                                                          $(".soldToInfo").hide();
                                                                      }
                                                                      
                                                                      // Show minimum order message As Per Sold To Segmentation By Sameer Mahadik On(10-6-2021)
                                                                      var minOrderAmt = "$1,000";
                                                                      var minOrderMessage = 'Please note that this order may be subject to a minimum order fee if the order is less than ';
                                                                      
                                                                      if (m.Customer_Segmentation__c == "FD") {
                                                                          minOrderAmt = "$2,500";
                                                                      }
                                                                      
                                                                      $(".min-order-message").html('<span><i class="fa fa-info-circle"></i> ' + minOrderMessage + minOrderAmt + '</span>').css("display", "block");
                                                                      
                                                                      // Get Price Agreement Record By Saved Sold To Account BY Sameer Mahadik On (5-20-2021)
                                                                      if (isAgent) {
                                                                          console.log('initSearch PriceAgreement -- 4');
                                                                          var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                                                          remoteCall.invokeCtx('initSearchPriceAgreement', isAgent, accname,
                                                                                               function (priceAgreements, err) {
                                                                                                   view.model.attributes.priceAgreements = priceAgreements;
                                                                                               }, {
                                                                                                   nmsp: false, escape: false, buffer: false
                                                                                               });
                                                                      }
                                                                  }
                                                              });
                                                          },
                                                          {
                                                              nmsp: false, escape: false
                                                          });
                                     
                                     
                                     
                                     // var iterator = view.model.attributes.soldToAccounts.values();
                                     //     console.log("Test iterator ", iterator.next().value);
                                     // var a = document.getElementById("SoldToAccount").value;
                                     // console.log("Test iterator ", a);
                                     var accountName;
                                     // $("#SoldToAccount").val(view.model.attributes.soldToAccount);
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     // $( "#SoldToAccount" ).change(function() {
                                     //accountName = $("#SoldToAccount").val();
                                     //console.log("Sold To Acc Name :", accountName);
                                     
                                     //	});
                                     //   $("#SoldToAccount").val(accountName);
                                     
                                     if(view.model.attributes.soldToAccount != undefined) {
                                         //console.log("Sold To Accts : ", view.model.attributes.soldToAccounts);
                                         if(view.model.attributes.soldToAccounts != undefined) {
                                             var soldToAccts = view.model.attributes.soldToAccounts;
                                             // soldToAccts.forEach(function(acct){
                                             //    console.log("Sold To Acc :", acct);
                                             // soldToAccts.forEach(function(acct){
                                             //  if(acct.id == view.model.attributes.soldToAccount ){
                                             //  $("#SoldToAccount").val(acct.name);
                                             //    break;
                                             // }
                                             
                                             // console.log("Sold To Acc :", soldToAccts);
                                             // console.log("Sold To Acc :", acct);
                                             // });
                                         }
                                     }
                                     const urlParams = new URLSearchParams(window.location.search);
                                     if(view.model.attributes.orderType == 'Revise Price Agreement' || urlParams.get('isRevise') === "true"){
                                         console.log('revise');
                                         //$(".soldToSearchText").prop("readonly", true);
                                         //$(".soldToSearchText").attr("disabled", true);
                                         $('.requestOneTimePAButton').css('display','none');
                                         if (urlParams.get('portalUser') == null) {
                                             $('.requestPAButton').css('display','none');
                                         }
                                         $('.continueShoppingButton').css('display','none');
                                         $('.cc_rfq_link_button').css('display','none');
                                         $('.sampleOrderContainer').css('display','none');
                                         $('.checkOutBtnNewBehavior').css('display','none');
                                         $('#shoppingCartTitle').text(CCRZ.pageLabelMultiString('OrderTypePAModification','').string);
                                         $("#shoppingCartTitle").append('<h5>'+view.model.attributes.agreementNumber+'</h5>');
                                         $('.PASearchContainer').each(function(i){
                                             $(this).css('display','none');
                                         });
                                         $(".deleteItem").each(function() {
                                             $(this).css('display','none');
                                         });
                                         
                                         // remove minimum order message for revise cart By Sameer Mahadik On(10-6-2021)
                                         $(".min-order-message").remove();
                                     }
                                     else{
                                         $('.revisePAButton').css('display','none');
                                     }
                                     console.log("rep Code : ", repCode);
                                     //    $('.sampleOrderContainer').css('visibility','hidden');
                                     
                                     // Fix Price Edit Issue On Cart Page For Agent & Distributor By Sameer Mahadik On(7-26-2021)
                                     var userType = "";
                                     if(localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}') !== null) {
                                         var userData = localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}');
                                         userData = JSON.parse(userData);
                                         userType = localStorage.getItem(userData['User Type']);
                                     }
                                     
                                     //if(repCode == undefined) {
                                     console.log("User Type: ", userType);
                                     console.log("portalUser: ", urlParams.get('portalUser'));
                                     if(userType == "Agent") {
                                         console.log("Currency:",view.model.attributes.ECartItemsS)
                                     }
                                     if(userType !== "Agent") {
                                         $('.distributorHide').css('display','none');
                                         $('.customPriceDisplay').css('display','none');
                                         $('.commissionCalcDisplay').css('display','none');
                                         // Add comment on below code to fix sold to filed desappearing issue By Sameer Mahadik On(5-28-2021)
                                         //$('.soldToSelector').css('display','none');
                                         $('.orderTypeContainer').css('display','none');
                                         $('.applyCustomPrice').css('display','none');
                                         if (urlParams.get('portalUser') == null) {
                                             $('.requestPAButton').css('display','none');
                                         }
                                         $('.revisePAButton').css('display','none');
                                         $('.requestOneTimePAButton').css('display','none');
                                         //                $('.showcommissionWidgetModalButton').css('display','none');
                                         //below code to fix Apply pricing link no clickable issue By Ravi Singh On(06-09-2021)
                                         //$('.sampleOrderContainer').css('display','none');
                                         $('.sampleOrderContainer').css('visibility','hidden');
                                     }
                                     else{
                                         isAgent = true;
                                         $('.defaultPriceDisplay').css('display','none');
                                         
                                         
                                         if(!view.model.attributes.hasOwnProperty('soldToAccounts')){
                                             if(undefined != view.model.attributes.soldToAccounts && view.model.attributes.soldToAccounts.length < 1 ){
                                                 console.log('initSearch SoldTo -- 5');
                                                 view.initSearchSoldTo(contactId);
                                             }
                                         }
                                         else{
                                             let curSoldTo = CCRZ.cartDetailModel.attributes.soldToAccount;
                                             view.model.attributes.soldToAccounts.forEach(function(acct){
                                                 currentTarget = acct.Id;
                                                 if(currentTarget == curSoldTo) $('.soldToSearchText').val(acct.Name + " - " + acct.GE_LGT_EM_SAP_Customer_Number__c);
                                             });
                                         }
                                     }
                                     console.log('CCRZ.effSelectorView ',CCRZ.effSelectorView);
                                     console.log('CCRZ.effSelectorView ',CCRZ.effSelectorView.dataSet.workingEffAccount);
                                     if (CCRZ.currentUser && CCRZ.currentUser.GEAccountGroup === 'ZEAG'
                                         && CCRZ.effSelectorView.dataSet.workingEffAccount && CCRZ.effSelectorView.dataSet.workingEffAccount.Customer_Segmentation__c === 'FD') {
                                         $('.showcommissionWidgetModalButton').show();
                                     }
                                     
                                     //console.log("CCRZ.currentUser.profileName"+ CCRZ.currentUser.profileName);
                                     //console.log("CCRZ.currentUser.permissionSet"+ CCRZ.currentUser.permissionSet);
                                     // Comment Below Permission Set Code & Add It In B2B_Footer_GEC.page By Sameer Mahadik On (8-18-2021)
                                     // if(CCRZ.currentUser.profileName === 'Agent Read Only B2B Storefront Registered Users' && CCRZ.currentUser.permissionSet != 'View_Commissions_Set_Price'){
                                     //     $('.showcommissionWidgetModalButton').css('display','none');
                                     // }
                                     
                                     if(undefined == view.model.attributes.priceAgreements || view.model.attributes.priceAgreements.length < 1 ){
                                         if(!view.model.attributes.hasOwnProperty('priceAgreements')){
                                             //Changes added
                                             //console.log("Current Sold to Is:" ,view.model.attributes.soldToAccount);
                                             console.log('initSearch PriceAgreement -- 5');
                                             var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                             remoteCall.invokeCtx('initSearchPriceAgreement', isAgent, accountId,
                                                                  function (priceAgreements, err) {
                                                                      view.model.attributes.priceAgreements = priceAgreements;
                                                                  }, {
                                                                      nmsp: false, escape: false, buffer: false
                                                                  });
                                         }
                                     }
                                     
                                     if(!view.model.attributes.hasOwnProperty('priceUoms')){
                                         var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
                                         remoteCall.invokeCtx('getAttributeMapForUnitOfMeasures',
                                                              function (measureList, err) {
                                                                  view.model.attributes.measureList = measureList;
                                                              }, {
                                                                  nmsp: false, escape: false
                                                              });
                                     }
                                 });
                                 
                                 var reorderMessageObj = {messages: []};
                                 
                                 CCRZ.pubSub.once('view:CustomCartDetailView:refresh',function(view){
                                     
                                     //console.log(view.model.attributes.ECartItemsS);
                                     view.model.attributes.ECartItemsS.models.forEach(function(item){
                                         if(item.attributes.reorderAgreementInvalid){
                                             reorderMessageObj.messages.push(CCRZ.createPageMessage('ERROR', 'priceAgreementError'+item.id, 'ReorderInvalidItem').messages[0]);
                                             item.attributes.reorderAgreementInvalid = true;
                                         }
                                     });
                                     if(reorderMessageObj.messages.length > 0){
                                         reorderMessageObj.messages.push(CCRZ.createPageMessage('WARN', 'messagingSection-Warning', 'ReorderInvalidHeader').messages[0]);
                                     }
                                     
                                     setTimeout(() => {
                                         CCRZ.pubSub.trigger('pageMessage', reorderMessageObj);
                                     }, 100);
                                         console.log("customMyPriceDisplay: ", $('.customMyPriceDisplay').length);
                                         $('.customMyPriceDisplay').each(function(index, item) {
                                         console.log("customMyPriceDisplay CCRZ: ", view.model.attributes);
                                         console.log("customMyPriceDisplay item: ", $(item).val());
                                         var lineItemPrice = parseFloat($(item).val().replace('$', ''));
                                         var formatItemPrice = new Intl.NumberFormat('en-US', { style: 'currency', currency: view.model.attributes.currencyISOCode}).format(lineItemPrice);
                                     console.log("formatItemPrice: ", formatItemPrice);
                                     $(item).val(formatItemPrice);
                                 });
                                 // var requestedPrice1 = parseFloat($('.customMyPriceDisplay').val().replace('$', ''));
                                 // console.log("requestedPrice1",requestedPrice1);
                                 
                             });
        
        
        
        Handlebars.registerHelper('uomLabel', function (value) {
            if (value && uomLabels.hasOwnProperty(value)) {
                return uomLabels[value];
            }
            return value;
        });
        
        //        Handlebars.registerHelper('uomOptionElement', function (currentUOM, uomOption) {
        //            if (currentUOM === uomOption) {
        //                return `<option value=${uomOption} selected>${uomLabels.hasOwnProperty(uomOption) ? uomLabels[uomOption] : uomOption}</option>`
        //            }
        //            return `<option value=${uomOption}>${uomLabels.hasOwnProperty(uomOption) ? uomLabels[uomOption] : uomOption}</option>`
        //        });
        
        Handlebars.registerHelper('isUserAgent', function () {
            return isUserAgent();
        });
        
        function isUserAgent() {
            console.log("Is User Agent ProfileName: ", CCRZ.currentUser.profileName);
            return ['Agent Read Only B2B Storefront Registered Users', 'Agent B2B Storefront Registered Users'].includes(CCRZ.currentUser?.profileName);
                                                                                                                         }
                                                                                                                         
                                                                                                                         
                                                                                                                         
                                                                                                                         CCRZ.pubSub.on("getPricingUOM", function (sku) {
                                                                                                                         //console.log("getPricingUOM");
                                                                                                                         var remoteCall = _.extend(CCRZ.RemoteInvocation, {className: 'PriceAgreementController'});
            remoteCall.invokeCtx('getPricingUOM', sku, function (res, err) {
                if (res != null && res.data != null) {
                    var callRespDate = new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
                    globalUOMMultiplier = res.data;
                }
            }, {
                nmsp: false,
                escape: false,
                timeout: 120000
            });
            
        });
        
        
        CCRZ.pubSub.on('effectiveAccountLoaded', function(effectiveAccount){
            if (CCRZ.currentUser.GEAccountGroup === 'ZEAG'
                && CCRZ.effSelectorView.dataSet.workingEffAccount.Customer_Segmentation__c === 'FD') {
                $('.showcommissionWidgetModalButton').show();
            }
            
            // Optimize updateCartAccount remote call function By Sameer Mahadik On(3-8-2022)
            // if (localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}') !== null) {
            //     var userData = localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}');
            //     userData = JSON.parse(userData);
            //     var userType = localStorage.getItem(userData['User Type']);
            //     var id = "";
            //     if (userType == "Agent") {
            //         id = localStorage.getItem(userData['AgentID']);
            //     } else {
            //         id = localStorage.getItem(userData['DistributorID']);
            //     } 

            //     console.log("updateCartAccount RemoteCall is Start In effectiveAccountLoaded  At " + new Date() + " For " + userType + " Which ID Is "+ id);
            //     var remoteCall = _.extend(CCRZ.RemoteInvocation, { className: 'CartDetailActions' });
            //     remoteCall.invokeCtx('updateCartAccount', id,
            //     function (res, err) {
            //         console.log("updateCartAccount RemoteCall Is Executed In effectiveAccountLoaded At " + new Date() + " For " + userType + " Which ID Is "+ id);
            //     }, {
            //         nmsp: false, escape: false
            //     });
            // }
        });
        
        CCRZ.pubSub.on('cartChange', function(cartChanged){
            console.log('Cart change listener ',CCRZ.pagevars.currentCartID);
            /*
                if (CCRZ.pagevars.currentCartID) {

                    var communitySessionStorageKeys = {};
                    let storageKeys = localStorage.getItem('LSSIndex:LOCAL{"namespace":"c"}');
                    communitySessionStorageKeys.cartId = Math.random();

                    if (storageKeys) {
                        let values = JSON.parse(storageKeys);
                        for (const key in values) {
                            communitySessionStorageKeys[key] = values[key];
                        }
                    }
                    console.log('cartId to LS ',CCRZ.pagevars.currentCartID);
                    localStorage.setItem(communitySessionStorageKeys.cartId, CCRZ.pagevars.currentCartID);

                }
                */
                
            });
                
                
                
                
                /*
    //code added
    <div id="LoadingvfDIV" class="slds-spinner_container" style="display:block;">
            <div class="slds-spinner slds-spinner--large" aria-hidden="false" role="alert">
                <div class="slds-spinner__dot-a"></div>
                <div class="slds-spinner__dot-b"></div>
            </div>
        </div>

        <div class="slds-m-around--xx-small">
            <div id="lightningvfDIV" style="min-height: 100vh !important;display:none;"/>
        </div>


            $Lightning.use("c:AppWebApp4vf", function() {
                $Lightning.createComponent("c:CmpWebApp", // Component name
                                           {},
                                           "lightningvfDIV",
                                           function(cmp) {
                                               var loadingDivElt = document.getElementById("LoadingvfDIV");
                                               loadingDivElt.style.display = 'none' ;
                                               var ltngDivElt = document.getElementById("lightningvfDIV");
                                               ltngDivElt.style.display = 'block' ;
                                               console.log('AppWebApp VF Page includer initialized');
                                           });
            });
    */
                
                
                </script>
    
    
    
    <style>
        
        a.applyPricing {
        position: relative;
        left: 10px;
        top: 20px;
        color: #6082B6  !important;
        }
        
        a.applyPricingHeader {
        /* position: relative;
        left: 10px;
        top: 20px; */
        color: #6082B6  !important;
        display: inline-block;
        padding: 10px 10px;
        }
        
        a.applyPricingAttr {
        position: relative;
        left: 10px;
        top: 20px;
        color: #6082B6  !important;
        }
        
        a.applyPricing:hover {
        color: #6082B6 !important;
        }
        
        .customPriceDisplay {
        width: 40%;
        }
        
        .priceAgreementSearchText:focus + .searchResults { display: block }
        .soldToSearchText:focus + .soldToSearchResults { display: block }
        
        .PASearchContainer{
        width: 100%;
        margin-bottom: 5px;
        }
        
        .SoldSearchContainer{
        width: 100%;
        margin-bottom: 5px;
        }
        
        .priceAgreementSearchText{
        height: 35px;
        font-size: 14px;
        max-width: 100%;
        float: right !important;
        }
        
        .soldToSearchText {
        height: 40px;
        width: 100%
        float: right;
        font-size: 16px;
        }
        
        .saveSoldTo{
        height: 40px;
        }
        
        .priceAgreementSearchText[data-id="header"] {
        height: 40px;
        width: 100%
        float: right;
        font-size: 16px;
        }
        
        .searchResults {
        display: none;
        position: absolute;
        top: 36px;
        left: 0;
        right: 0;
        z-index: 10;
        margin: 0;
        text-align: left;
        list-style-type:none;
        background-color: white;
        min-width: 230px;
        border: 1px solid #ddd;
        font-size: 12px;
        max-height: 100px;
        overflow: auto;
        
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(0,0,0,.6);
        }
        
        .soldToSearchResults {
        display: none;
        position: absolute;
        left: 0px;
        right: 50px;
        top: 40px;
        z-index: 10;
        margin: 0;
        text-align: left;
        list-style-type:none;
        background-color: white;
        min-width: 100%;
        border: 1px solid #ddd;
        font-size: 12px;
        max-height: 100px;
        overflow: auto;
        
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(0,0,0,.6);
        }
        
        .searchResults[data-id="header"] {
        display: none;
        position: absolute;
        /* left: 15px;
        right: 15px; */
        top: 72px;
        z-index: 10;
        margin: 0;
        text-align: left;
        list-style-type:none;
        background-color: white;
        min-width: 230px;
        border: 1px solid #ddd;
        font-size: 12px;
        max-height: 100px;
        overflow: auto;
        
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(0,0,0,.6);
        }
        
        .search .results a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        }
        
        a.searchOption {
        padding-top: 5px;
        padding-bottom: 5px;
        display: block ;
        }
        
        .orderTypeOption {
        padding-top: 5px;
        padding-bottom: 5px;
        font-size: 12px;
        }
        
        a.soldToSearchOption {
        padding-top: 5px;
        padding-bottom: 5px;
        display: block ;
        }
        
        p.cc_label {
        font-size: 16px;
        }
        
        .confirmationcenter {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        }
        
        .grand_total p {
        text-align: right;
        }
        
        /* .loadingSpinner {
        position: absolute;
        z-index: 1000;
        top: 50%;
        left: 50%;
        height: 80px;
        width: 80px;
        background: rgba( 255, 255, 255, .8 )
        url('/assets/img/nabisoft/tutorials/loading-spinner-red.gif')
        50% 50%
        no-repeat;
        }
        */
        /*added
        
        .spinnerBg{
        width: 100%;
        height: 100%;
        position: absolute;
        background-color: #000;
        opacity: 0.1;
        z-index: 999999;
        }
        .spinner{
        width: 100%;
        height: 100%;
        position: absolute;
        background-image: url("/img/loading32.gif");
        background-size: 56px;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center;
        z-index: 9999999;
        opacity: 1;
        } */
        
        
    </style>
    
    <!--apex:actionStatus id="myAjaxStatus">
<apex:facet name="start" >
<div style="position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
opacity: 0.25;
z-index: 1000;
background-color: black;">
&nbsp;
</div>
<div style="position: fixed;
left: 0;
top: 0;
bottom: 0;
right: 0;
z-index: 1001;
margin: 15% 50%">
<div style="display: inline-block; padding: 2px; background-color: #fff; width: 125px;">
<img src="/img/loading.gif" style="float: left; margin: 8px;" />
<span style="display: inline-block; padding: 10px 0px;">Please Wait...</span>
</div>
</div>
</apex:facet>
</apex:actionStatus-->
    
    
    <!--apex:actionStatus id="spinnerStatus">
<apex:facet name="start">
<div class="spinnerBg" />
<div class="spinner" />
</apex:facet>
</apex:actionStatus>

<apex:commandButton value="Save" status="spinnerStatus" action="{!save}" /-->
    
    
    
    
    
</apex:page>